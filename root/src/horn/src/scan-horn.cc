#line 2 "scan-horn.cc"

#line 4 "scan-horn.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gram__create_buffer
#define yy_delete_buffer gram__delete_buffer
#define yy_flex_debug gram__flex_debug
#define yy_init_buffer gram__init_buffer
#define yy_flush_buffer gram__flush_buffer
#define yy_load_buffer_state gram__load_buffer_state
#define yy_switch_to_buffer gram__switch_to_buffer
#define yyin gram_in
#define yyleng gram_leng
#define yylex gram_lex
#define yylineno gram_lineno
#define yyout gram_out
#define yyrestart gram_restart
#define yytext gram_text
#define yywrap gram_wrap
#define yyalloc gram_alloc
#define yyrealloc gram_realloc
#define yyfree gram_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gram_restart(gram_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t gram_leng;

extern FILE *gram_in, *gram_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gram_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gram_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gram_restart()), so that the user can continue scanning by
	 * just pointing gram_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when gram_text is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t gram_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow gram_wrap()'s to do buffer switches
 * instead of setting up a fresh gram_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void gram_restart (FILE *input_file  );
void gram__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE gram__create_buffer (FILE *file,int size  );
void gram__delete_buffer (YY_BUFFER_STATE b  );
void gram__flush_buffer (YY_BUFFER_STATE b  );
void gram_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void gram_pop_buffer_state (void );

static void gram_ensure_buffer_stack (void );
static void gram__load_buffer_state (void );
static void gram__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER gram__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE gram__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE gram__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE gram__scan_bytes (yyconst char *bytes,yy_size_t len  );

void *gram_alloc (yy_size_t  );
void *gram_realloc (void *,yy_size_t  );
void gram_free (void *  );

#define yy_new_buffer gram__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gram_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gram__create_buffer(gram_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gram_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gram__create_buffer(gram_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define gram_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *gram_in = (FILE *) 0, *gram_out = (FILE *) 0;

typedef int yy_state_type;

extern int gram_lineno;

int gram_lineno = 1;

extern char *gram_text;
#define yytext_ptr gram_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gram_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	gram_leng = (yy_size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 124
#define YY_END_OF_BUFFER 125
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[671] =
    {   0,
        2,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,   93,
      107,  107,  107,  107,  125,   89,    2,    2,   68,   80,
       89,   79,   68,    1,   75,   89,   76,   76,   87,   72,
       89,   71,   74,   82,   89,  122,   94,   94,  122,   90,
       95,   95,   97,   98,   96,   90,  123,  113,  122,  112,
      122,  122,  122,  116,  119,  120,  122,   92,  122,  111,
      110,  122,  109,  108,    2,    0,    0,   88,    0,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   81,   69,   70,

       75,    0,    2,   76,   78,   78,    0,    0,   85,   72,
       72,   73,    0,    2,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   74,   74,    0,
      105,  104,  101,  105,   99,  103,  105,  100,   97,  121,
      114,  115,    0,  117,    0,  116,  118,    0,   91,    0,
        0,   93,  107,  107,  107,  107,    0,   83,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,    0,    0,
        2,    2,    2,    2,   78,   77,   86,   84,   73,   71,

       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,    0,  101,    0,    0,  102,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,    0,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
        2,    2,    2,    2,   71,   51,   71,   64,   71,   71,
       66,   65,   71,   56,   71,   71,   71,   71,   71,   71,
        0,  101,    0,    0,    4,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,    0,   67,   67,   67,
       21,    0,   67,   67,   67,    0,    0,   67,   67,   67,
       67,   67,   67,   67,   67,   34,   67,   67,   67,   67,
       67,   67,   67,   42,   67,   45,   67,   67,   48,    2,
        2,    2,    2,    2,    2,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,    0,    0,    0,   67,
        6,   67,   67,   67,   11,   67,   67,   67,    0,   67,
        0,   67,   67,   67,    0,   67,   24,    0,   67,    0,
        0,   67,   67,   67,   67,   30,   67,   32,   67,   67,
       67,   67,    0,   67,   67,   39,   67,   41,   43,   46,

       67,    0,    0,    2,    2,    2,    2,    2,   57,   59,
       71,   55,   71,   71,   53,   71,   71,   58,   52,    0,
        0,  106,   67,   67,    8,   67,    0,   67,   49,   13,
        0,    0,   67,    0,   67,   67,   67,    0,   67,    0,
       67,    0,    0,   67,   67,   67,   67,   31,    0,   67,
       50,   67,    0,   67,   67,   67,    0,   67,   67,    0,
        2,    0,    2,    2,    2,    2,    2,    2,   71,   71,
       54,   71,   71,    0,   67,   67,    9,   67,    0,   67,
        0,   67,    0,    0,   67,    0,   67,   67,   67,    0,
       67,    0,   67,    0,    0,   67,   67,   67,   67,    0,

       67,   36,    0,   67,   38,   67,    0,   67,   47,    0,
       60,   61,   71,   71,    0,   67,    0,   67,   67,    0,
       67,    0,   67,    0,    0,   67,    0,    0,   67,   20,
        0,   67,    0,   67,    0,   27,   67,   27,   28,   67,
        0,   67,    0,   67,   40,    0,   67,   71,   71,    0,
       67,    0,   67,   67,    0,   67,   14,   14,    0,    0,
       67,    0,    0,   67,   22,   23,    0,   67,    0,   67,
       67,    0,   67,    0,   67,    0,   67,   62,   71,    0,
        0,    5,    0,   67,   10,    0,   67,    0,    0,   67,
       18,    0,   67,    0,   67,    0,   67,   67,    0,   35,

        0,   67,    0,   67,   71,    3,    0,   67,    0,   67,
       15,    0,   67,    0,   19,   25,   25,    0,   67,   67,
       33,   37,   37,   44,   44,   63,    7,    7,    0,   67,
        0,   67,    0,    0,   67,   67,   12,   12,    0,   67,
        0,    0,   67,   67,    0,   67,   17,    0,   67,   67,
        0,   67,   26,   26,   67,    0,   67,   67,    0,   67,
        0,   16,   16,    0,    0,    0,    0,    0,   29,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,    5,
        5,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,    5,    5,   19,
       20,   21,   22,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       32,   39,   40,   41,   42,   32,   43,   44,   45,   32,
       46,   47,   46,    5,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   58,   71,
       72,   58,   73,    5,   74,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    4,    4,    4,    5,    1,
        6,    1,    7,    7,    7,    7,    7,    7,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    9,    1,    8,    7,    7,
        7,    7,    7,    7,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    1,    1,   10
    } ;

static yyconst flex_int16_t yy_base[702] =
    {   0,
        0, 1631,   73,   74,   75,   78,   64,   67,   86,   90,
       94,  108,  109,  123,  125,  151,  127,  133,   88,  104,
      149,  155,  138,  153, 1637, 1639,  161,  169, 1639, 1639,
      218, 1639, 1616, 1639, 1621,  159,  161,  170,   98,  278,
      187,  337,  193, 1639, 1574, 1639, 1639, 1639,  374, 1639,
     1639, 1639,    0, 1639, 1639,    0, 1639, 1639, 1559, 1639,
      165,  171,  175, 1639, 1639, 1639,  180, 1639,  211, 1639,
     1639,  217, 1639, 1639,  354,  191,  226, 1639,  295,    0,
     1569,  140,  165, 1574, 1570, 1567,  321, 1575,  310, 1558,
      168,   53,  313,  323, 1564, 1572, 1575, 1639, 1639,    0,

        0, 1613,  385,  376,    0,  430, 1601, 1600, 1639,  469,
        0,  388,  395,  405,    0,  397,  454,  528,  445,  533,
      421,  538,  544,  558,  550,  564,  570,    0,  580, 1563,
     1639, 1639,  129,    0, 1639, 1639,    0,    0,    0, 1639,
     1639, 1639,  423, 1639,  447, 1639, 1639,  462, 1639,  471,
      597, 1572, 1639,  601, 1571,  607,  610, 1639,    0,  171,
      565, 1551, 1550, 1551,  359, 1548,  410, 1551,  311, 1561,
     1545, 1549,  577, 1556, 1540, 1541,  182, 1540, 1540, 1549,
     1550, 1553, 1535, 1541, 1535, 1541, 1531, 1545, 1585,  402,
      614,  618,  632,  641,    0,    0, 1639, 1639,    0,  610,

      635,  641,  652,  657,  673,  678,  687,  697,  702,  707,
      713,  718,  735,  743, 1532,  308,    0,    0,    0,  674,
      652,  705,  382,  735,  709,  743,  501,  760,  763,  766,
      769,  512, 1540, 1522, 1522,   33, 1522, 1536, 1525,  504,
     1534, 1533, 1572, 1516, 1530, 1527, 1513, 1567, 1530, 1523,
     1524,  417,  531,  588, 1510, 1511,  574,  609, 1512, 1520,
     1503, 1515, 1510, 1503, 1507, 1514, 1513, 1502, 1514, 1512,
      772,  775,  789,  792,  783,  792,  797,  810,  824,  829,
      834,  839,  845,  850,  855,  860,  868,  874,  884,  889,
     1509, 1639,    0,    0,    0, 1508, 1505, 1490, 1496, 1491,

     1505, 1489, 1492, 1502, 1539, 1499, 1486, 1492, 1482, 1478,
        0, 1482, 1477, 1491,  190, 1490, 1485, 1488, 1483, 1472,
     1485, 1476, 1467, 1474, 1481, 1480, 1479, 1463,  252, 1473,
     1461, 1475, 1459,    0, 1464,    0, 1463, 1461,    0,  908,
      911,  925,  928,  942,  946,  946,  951,  960,  969,  974,
      980,  995, 1000, 1005, 1010, 1015, 1519,    0,    0, 1460,
        0, 1461, 1467, 1450,    0,  637, 1466, 1449, 1452,  685,
     1466, 1465, 1464, 1463, 1462, 1453,    0, 1445, 1444, 1453,
     1436, 1421, 1412, 1404, 1402,    0, 1399,    0, 1453, 1411,
     1396, 1396, 1384, 1381, 1378,    0, 1372,    0,  735,    0,

     1372,  774,  827, 1040, 1049, 1058, 1067, 1076, 1022, 1031,
     1058, 1049, 1067, 1076, 1083, 1090, 1102, 1108, 1113,  800,
        0, 1639, 1368, 1367, 1365, 1380, 1358, 1357,    0,  773,
     1357, 1359, 1355, 1351, 1353, 1361, 1352, 1340, 1319, 1315,
     1312, 1316, 1311, 1298, 1293, 1278, 1287,    0, 1269, 1273,
        0, 1259, 1272, 1271, 1266, 1233, 1227, 1226, 1240,  788,
     1130,  998, 1133, 1147, 1150, 1164, 1168, 1183, 1174, 1185,
     1200, 1205, 1210,  877, 1234,  775,    0, 1222, 1236, 1235,
     1221, 1220, 1232, 1207, 1201, 1196, 1245, 1185, 1195, 1194,
     1176, 1178, 1172, 1151, 1146, 1143, 1142, 1156, 1140, 1156,

     1142,    0, 1134, 1130,    0, 1133, 1140, 1135,    0, 1172,
     1218, 1223, 1228, 1233, 1175, 1113, 1111, 1109, 1106, 1098,
     1097, 1095, 1093, 1104, 1088, 1087, 1094, 1097, 1085,    0,
     1080, 1072, 1084, 1074, 1061, 1639, 1057,    0,    0, 1051,
     1045, 1059, 1042, 1036,    0, 1052, 1039, 1238, 1250, 1082,
      996,  991,  990,  969,  980,  975, 1639,    0,  963,  951,
      942,  939,  952,  925, 1639,    0,  925,  923,  911,  905,
      914,  921,  913,  906,  900,  891,  887, 1243, 1255,  936,
      678,    0,  888,  886,    0,  874,  873,  863,  864,  856,
     1639,  856,  869,  849,  846,  822,  831,  846,  836,    0,

      814,  809,  805,  796, 1261, 1639,  783,  781,  753,  745,
     1639,  737,  734,  723,    0, 1639,    0,  691,  678,  683,
     1639, 1639,    0, 1639,    0, 1266, 1639,    0,  673,  669,
      841,  906,  637,  631,  616,  605, 1639,    0,  600,  594,
      576,  578,  577,  539,  549,  536, 1639,  528,  522,  512,
      503,  483, 1639,    0,  439,  436,  407,  428,  367,  355,
      346, 1639,    0,  336,  286,  226,  144,   38, 1639, 1639,
     1297, 1307, 1315, 1320, 1328, 1335, 1341, 1349, 1359, 1369,
     1376, 1384, 1394, 1401, 1407, 1412, 1417, 1422, 1426, 1430,
     1434, 1439, 1443, 1450, 1457, 1461, 1465, 1469, 1476, 1486,

     1496
    } ;

static yyconst flex_int16_t yy_def[702] =
    {   0,
      670,    1,  671,  671,  671,  671,  672,  672,  671,  671,
      671,  671,  671,  671,  671,  671,  671,  671,  671,  671,
      671,  671,  671,  671,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  673,  670,  674,  674,  675,  670,
      670,  676,  677,  670,  670,  670,  670,  670,  678,  670,
      670,  670,  679,  670,  670,  679,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  680,  670,  670,  670,  670,  670,  670,  670,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  670,  670,  673,

      673,  682,  683,  674,  684,  684,  675,  675,  670,  670,
       40,  685,  670,  670,  686,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  687,  677,  670,
      670,  670,  670,  688,  670,  670,  689,  690,  679,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  682,  682,
      683,  683,  683,  683,  684,  106,  670,  670,  691,  676,

      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  670,  670,  692,  693,  690,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  680,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  670,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      694,  683,  683,  670,  676,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  676,
      670,  670,  695,  696,  681,  681,  681,  681,  681,  681,

      681,  681,  681,  681,  681,  681,  670,  681,  681,  681,
      681,  670,  681,  681,  681,  670,  670,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  681,  694,
      694,  682,  694,  694,  694,  676,  676,  676,  676,  676,
      676,  676,  676,  676,  676,  676,  670,  697,  698,  681,
      681,  681,  681,  681,  681,  681,  681,  681,  670,  681,
      670,  681,  681,  681,  670,  681,  681,  670,  681,  670,
      670,  681,  681,  681,  681,  681,  681,  681,  681,  681,
      681,  681,  670,  681,  681,  681,  681,  681,  681,  681,

      681,  682,  682,  683,  699,  694,  694,  682,  676,  676,
      676,  676,  676,  676,  676,  676,  676,  676,  676,  670,
      689,  670,  681,  681,  681,  681,  670,  681,  681,  681,
      670,  670,  681,  670,  681,  681,  681,  670,  681,  670,
      681,  670,  670,  681,  681,  681,  681,  681,  670,  681,
      681,  681,  670,  681,  681,  681,  670,  681,  681,  700,
      694,  682,  682,  694,  694,  682,  694,  694,  676,  676,
      676,  676,  676,  670,  681,  681,  681,  681,  670,  681,
      670,  681,  670,  670,  681,  670,  681,  681,  681,  670,
      681,  670,  681,  670,  670,  681,  681,  681,  681,  670,

      681,  681,  670,  681,  681,  681,  670,  681,  681,  682,
      676,  676,  676,  676,  670,  681,  670,  681,  681,  670,
      681,  670,  681,  670,  670,  681,  670,  670,  681,  681,
      670,  681,  670,  681,  670,  670,  681,  681,  681,  681,
      670,  681,  670,  681,  681,  670,  681,  676,  676,  701,
      681,  670,  681,  681,  670,  681,  670,  681,  670,  670,
      681,  670,  670,  681,  670,  681,  670,  681,  670,  681,
      681,  670,  681,  670,  681,  670,  681,  676,  676,  701,
      701,  681,  670,  681,  681,  670,  681,  670,  670,  681,
      670,  670,  681,  670,  681,  670,  681,  681,  670,  681,

      670,  681,  670,  681,  676,  670,  670,  681,  670,  681,
      670,  670,  681,  670,  681,  670,  681,  670,  681,  681,
      670,  670,  681,  670,  681,  676,  670,  681,  670,  681,
      670,  681,  670,  670,  681,  681,  670,  681,  670,  681,
      670,  670,  681,  681,  670,  681,  670,  670,  681,  681,
      670,  681,  670,  681,  681,  670,  681,  681,  670,  681,
      670,  670,  681,  670,  670,  670,  670,  670,  670,    0,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670
    } ;

static yyconst flex_int16_t yy_nxt[1715] =
    {   0,
       26,   27,   28,   27,   29,   30,   26,   31,   32,   29,
       33,   34,   29,   35,   36,   37,   38,   38,   39,   29,
       26,   29,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   26,   41,   42,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   44,   26,   26,   47,   47,   51,   48,   48,
       51,  298,   54,   52,   55,   54,   52,   55,   57,  299,
       68,   58,   57,   59,   60,   58,   57,   59,   60,   58,

       61,   62,   60,  669,   61,  179,   68,  108,   61,  180,
       57,   57,   63,   58,   58,   62,   60,   60,  109,   49,
       49,   49,   61,   61,   49,   57,   63,   57,   58,   57,
       58,   60,   62,   60,   69,   57,   67,   61,   56,   61,
       73,   56,   67,   63,  216,  216,   74,   50,   50,   50,
       69,   70,   50,   57,   71,   73,   58,   70,   62,   60,
       71,   74,   75,   75,   75,   61,   64,   65,  102,   63,
       75,   75,   75,  103,  141,   76,  104,  104,  104,  142,
       64,   65,  146,   76,   72,  104,  104,  104,  113,  114,
      113,  144,  161,  147,  149,   72,  668,   64,   66,   72,

      102,   72,  378,  162,  106,  103,  101,   77,  128,  128,
      128,  143,  151,  152,  151,   77,  176,  145,  154,  155,
      154,  148,  233,   64,   66,   78,  150,  113,  114,  113,
      163,  106,  234,  177,  258,  164,  178,  379,  259,   79,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,  156,  393,   80,   80,   80,   81,   82,
       83,   84,   85,   80,   86,   80,   80,   87,   88,   89,
       90,   91,   80,   92,   93,   94,   95,   96,   80,   97,
       98,  101,  667,  110,  110,  110,  157,  157,  157,  394,

      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
      111,  111,  111,  292,  292,  111,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      101,  666,  115,  115,  115,   75,   75,   75,  172,  116,
      117,  118,  119,  120,  247,  122,  123,  158,   76,  168,
      124,  181,  173,  169,  125,  183,  126,  174,  127,  132,
      182,  248,  132,  170,  665,  184,  192,   75,  192,  133,
      133,  104,  104,  104,  185,  132,  113,  114,  113,  193,

       77,  101,  144,  199,  199,  199,   75,   75,   75,  664,
      101,  190,  115,  115,  115,  134,   75,  135,  241,   76,
      132,  663,  136,  136,  220,  221,  220,  136,  145,  242,
      200,  194,  201,  662,  101,  136,  115,  115,  115,  136,
      661,  136,  137,  136,  138,  196,  196,  196,  222,  223,
      222,   77,  196,  196,  196,  196,  196,  196,  101,  660,
      115,  115,  115,  224,  225,  224,  244,  101,  316,  115,
      115,  115,  226,  227,  226,  205,  317,  245,  196,  196,
      196,  196,  196,  196,  110,  110,  110,  202,  659,  658,
      203,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  670,  149,  110,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  101,  657,  115,  115,  115,  101,  150,  115,  115,
      115,  101,  303,  115,  115,  115,  304,  101,  156,  115,
      115,  115,  656,  101,  204,  115,  115,  115,  655,  206,
      208,  101,  654,  115,  115,  115,  207,  101,  653,  115,
      115,  115,  318,  101,  209,  115,  115,  115,  211,  252,
      319,  212,  652,  101,  210,  128,  128,  128,  151,  152,

      151,  213,  229,  155,  229,  651,  650,  214,  231,  232,
      231,  157,  157,  157,  235,  192,   75,  192,  236,  192,
       75,  192,  324,  101,  253,  115,  115,  115,  193,  649,
      648,  237,  193,  192,   75,  192,  320,  647,  254,  321,
      325,  271,  273,  274,  273,  275,  272,  646,  101,  427,
      115,  115,  115,  645,  101,  193,  115,  115,  115,  326,
      194,  141,  327,  277,  194,  101,  142,  115,  115,  115,
      101,  644,  115,  115,  115,  220,  221,  220,  194,  276,
      606,  643,  158,  581,  428,  278,  101,  194,  115,  115,
      115,  101,  279,  115,  115,  115,  642,  432,  143,  641,

      101,  280,  115,  115,  115,  281,  222,  223,  222,  283,
      101,  282,  115,  115,  115,  101,  146,  115,  115,  115,
      101,  638,  115,  115,  115,  637,  101,  147,  115,  115,
      115,  101,  433,  115,  115,  115,  224,  225,  224,  636,
      284,  635,  285,  287,  226,  227,  226,  457,  101,  286,
      115,  115,  115,  288,  634,  148,  101,  289,  115,  115,
      115,  151,  152,  151,  229,  155,  229,  229,  155,  229,
      231,  232,  231,  341,  342,  341,  192,   75,  192,  633,
      290,  343,  458,  460,  271,  481,  344,  517,  461,  272,
      273,  274,  273,   75,   75,   75,  101,  190,  115,  115,

      115,  632,  342,  193,  631,  101,   76,  115,  115,  115,
      101,  630,  115,  115,  115,  474,  474,  474,  345,  629,
      482,  194,  518,  101,  346,  115,  115,  115,  462,  463,
      462,  628,  347,  627,  618,  194,  190,  101,   77,  115,
      115,  115,  101,  618,  115,  115,  115,  101,  625,  115,
      115,  115,  101,  639,  115,  115,  115,  624,  101,  349,
      115,  115,  115,  101,  348,  115,  115,  115,  101,  618,
      115,  115,  115,  101,  623,  115,  115,  115,  619,  622,
      515,  101,  350,  115,  115,  115,  352,  101,  639,  115,
      115,  115,  474,  474,  474,  351,  621,  101,  354,  115,

      115,  115,  101,  353,  115,  115,  115,  620,  355,  341,
      342,  341,  341,  342,  341,  356,  617,  343,  639,  616,
      343,  615,  344,  614,  613,  344,  342,  342,  342,  341,
      342,  341,  612,  611,  190,  610,  609,  343,  608,  402,
      607,  581,  404,  341,  342,  341,  604,  407,  408,  407,
      603,  405,  602,  640,  345,  343,  406,  345,  601,  101,
      344,  115,  115,  115,  101,  600,  115,  115,  115,  599,
      598,  403,  597,  101,  345,  115,  115,  115,  596,  595,
      409,  594,  101,  410,  115,  115,  115,  101,  345,  115,
      115,  115,  345,  101,  593,  115,  115,  115,  411,  462,

      463,  462,  592,  413,  591,  590,  414,  190,  101,  412,
      115,  115,  115,  101,  589,  115,  115,  115,  101,  588,
      115,  115,  115,  101,  587,  115,  115,  115,  101,  586,
      115,  115,  115,  415,  585,  101,  418,  115,  115,  115,
      416,  192,   75,  192,  101,  417,  115,  115,  115,  271,
      465,  466,  465,  419,  272,  584,  583,  582,  343,  341,
      342,  341,  101,  467,  115,  115,  115,  405,  407,  408,
      407,  101,  406,  115,  115,  115,  343,  342,  342,  342,
      101,  344,  115,  115,  115,  190,  194,  581,  577,  101,
      402,  115,  115,  115,  469,  468,  101,  470,  115,  115,

      115,  576,  575,  101,  345,  115,  115,  115,  574,  573,
      572,  571,  472,  345,  471,  101,  570,  115,  115,  115,
      569,  101,  403,  115,  115,  115,  101,  568,  115,  115,
      115,  341,  342,  341,  342,  342,  342,  567,  566,  343,
      565,  564,  190,  473,  344,  563,  562,  402,  341,  342,
      341,  341,  342,  341,  561,  560,  343,  559,  558,  343,
      557,  344,  556,  555,  344,  342,  342,  342,  554,  341,
      342,  341,  553,  190,  552,  551,  345,  405,  402,  403,
      550,  190,  406,  547,  407,  408,  407,  101,  546,  115,
      115,  115,  343,  345,  545,  544,  345,  344,  101,  543,

      115,  115,  115,  542,  541,  540,  539,  511,  538,  512,
      403,  537,  536,  101,  345,  115,  115,  115,  101,  535,
      115,  115,  115,  101,  534,  115,  115,  115,  513,  345,
      533,  101,  514,  115,  115,  115,  101,  532,  115,  115,
      115,  101,  531,  115,  115,  115,  101,  530,  115,  115,
      115,  101,  529,  115,  115,  115,  101,  528,  115,  115,
      115,  548,  527,  101,  578,  115,  115,  115,  101,  526,
      115,  115,  115,  549,  101,  525,  115,  115,  115,  101,
      579,  115,  115,  115,  524,  523,  522,  521,  520,  519,
      516,  605,  509,  508,  507,  506,  626,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   53,   53,   53,
       53,   53,   53,   53,   53,   53,   53,  101,  505,  504,
      503,  101,  101,  105,  502,  501,  105,  105,  107,  107,
      107,  107,  500,  107,  107,  107,  107,  121,  121,  499,
      498,  121,  121,  129,  129,  497,  496,  129,  129,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  139,
      139,  139,  139,  495,  494,  139,  139,  139,  139,  153,
      153,  153,  153,  153,  153,  153,  153,  493,  153,  159,
      492,  491,  159,  159,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  195,  490,  489,  195,  195,  112,
      112,  488,  487,  112,  112,  115,  486,  485,  115,  115,
      128,  484,  483,  128,  128,  217,  480,  479,  217,  218,
      478,  477,  218,  219,  476,  475,  219,  199,  459,  456,
      199,  199,  293,  455,  454,  293,  294,  453,  452,  294,
      340,  340,  340,  340,  340,  340,  340,  340,  340,  340,
      358,  451,  450,  358,  359,  449,  448,  359,  421,  447,
      446,  421,  422,  445,  444,  422,  464,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  580,  443,  580,  580,

      580,  580,  580,  580,  580,  580,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  431,  430,  429,  426,  425,
      424,  423,  420,  401,  400,  399,  398,  397,  396,  395,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  357,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  329,  328,  323,  322,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  302,  301,  300,
      297,  296,  295,  291,  190,  270,  269,  268,  267,  266,

      265,  264,  263,  262,  261,  260,  257,  256,  255,  251,
      250,  249,  246,  243,  240,  239,  238,  230,  228,  215,
      198,  197,  190,  188,  187,  186,  175,  171,  167,  166,
      165,  160,  140,  130,  100,   99,  670,   45,   25,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670
    } ;

static yyconst flex_int16_t yy_chk[1715] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    3,    4,
        6,  236,    7,    5,    7,    8,    6,    8,    9,  236,
       19,    9,   10,    9,    9,   10,   11,   10,   10,   11,

        9,   11,   11,  668,   10,   92,   20,   39,   11,   92,
       12,   13,   11,   12,   13,   12,   12,   13,   39,    3,
        4,    5,   12,   13,    6,   14,   12,   15,   14,   17,
       15,   14,   15,   15,   19,   18,   17,   14,    7,   15,
       23,    8,   18,   15,  133,  133,   23,    3,    4,    5,
       20,   21,    6,   16,   21,   24,   16,   22,   16,   16,
       22,   24,   27,   27,   27,   16,   11,   11,   36,   16,
       28,   28,   28,   36,   61,   27,   37,   37,   37,   61,
       12,   12,   63,   28,   23,   38,   38,   38,   41,   41,
       41,   62,   82,   63,   67,   21,  667,   15,   15,   24,

       76,   22,  315,   82,   37,   76,   43,   27,   43,   43,
       43,   61,   69,   69,   69,   28,   91,   62,   72,   72,
       72,   63,  160,   16,   16,   31,   67,   77,   77,   77,
       83,   37,  160,   91,  177,   83,   91,  315,  177,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   72,  329,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   40,  666,   40,   40,   40,   79,   79,   79,  329,

       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,  216,  216,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       42,  665,   42,   42,   42,   75,   75,   75,   89,   42,
       42,   42,   42,   42,  169,   42,   42,   79,   75,   87,
       42,   93,   89,   87,   42,   94,   42,   89,   42,   49,
       93,  169,   49,   87,  664,   94,  103,  103,  103,   49,
       49,  104,  104,  104,   94,   49,  113,  113,  113,  103,

       75,  112,  223,  112,  112,  112,  114,  114,  114,  661,
      116,  190,  116,  116,  116,   49,  190,   49,  165,  114,
       49,  660,   49,   49,  143,  143,  143,   49,  223,  165,
      116,  103,  116,  659,  121,   49,  121,  121,  121,   49,
      658,   49,   49,   49,   49,  106,  106,  106,  145,  145,
      145,  114,  106,  106,  106,  106,  106,  106,  119,  657,
      119,  119,  119,  148,  148,  148,  167,  117,  252,  117,
      117,  117,  150,  150,  150,  119,  252,  167,  106,  106,
      106,  106,  106,  106,  110,  110,  110,  117,  656,  655,
      117,  110,  110,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  232,  227,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  118,  652,  118,  118,  118,  120,  227,  120,  120,
      120,  122,  240,  122,  122,  122,  240,  123,  232,  123,
      123,  123,  651,  125,  118,  125,  125,  125,  650,  120,
      123,  124,  649,  124,  124,  124,  122,  126,  648,  126,
      126,  126,  253,  127,  124,  127,  127,  127,  125,  173,
      253,  125,  646,  129,  124,  129,  129,  129,  151,  151,

      151,  126,  154,  154,  154,  645,  644,  127,  156,  156,
      156,  157,  157,  157,  161,  191,  191,  191,  161,  192,
      192,  192,  257,  200,  173,  200,  200,  200,  191,  643,
      642,  161,  192,  193,  193,  193,  254,  641,  173,  254,
      257,  193,  194,  194,  194,  200,  193,  640,  201,  366,
      201,  201,  201,  639,  202,  194,  202,  202,  202,  258,
      191,  221,  258,  202,  192,  203,  221,  203,  203,  203,
      204,  636,  204,  204,  204,  220,  220,  220,  193,  201,
      581,  635,  157,  581,  366,  203,  205,  194,  205,  205,
      205,  206,  204,  206,  206,  206,  634,  370,  221,  633,

      207,  205,  207,  207,  207,  206,  222,  222,  222,  207,
      208,  206,  208,  208,  208,  209,  225,  209,  209,  209,
      210,  630,  210,  210,  210,  629,  211,  225,  211,  211,
      211,  212,  370,  212,  212,  212,  224,  224,  224,  620,
      208,  619,  209,  211,  226,  226,  226,  399,  213,  210,
      213,  213,  213,  212,  618,  225,  214,  213,  214,  214,
      214,  228,  228,  228,  229,  229,  229,  230,  230,  230,
      231,  231,  231,  271,  271,  271,  272,  272,  272,  614,
      214,  271,  399,  402,  272,  430,  271,  476,  402,  272,
      273,  273,  273,  274,  274,  274,  275,  460,  275,  275,

      275,  613,  460,  273,  612,  276,  274,  276,  276,  276,
      277,  610,  277,  277,  277,  420,  420,  420,  271,  609,
      430,  272,  476,  278,  275,  278,  278,  278,  403,  403,
      403,  608,  277,  607,  596,  273,  403,  279,  274,  279,
      279,  279,  280,  597,  280,  280,  280,  281,  604,  281,
      281,  281,  282,  631,  282,  282,  282,  603,  283,  280,
      283,  283,  283,  284,  279,  284,  284,  284,  285,  596,
      285,  285,  285,  286,  602,  286,  286,  286,  597,  601,
      474,  287,  283,  287,  287,  287,  286,  288,  631,  288,
      288,  288,  474,  474,  474,  285,  599,  289,  288,  289,

      289,  289,  290,  287,  290,  290,  290,  598,  289,  340,
      340,  340,  341,  341,  341,  290,  595,  340,  632,  594,
      341,  593,  340,  592,  590,  341,  342,  342,  342,  343,
      343,  343,  589,  588,  342,  587,  586,  343,  584,  342,
      583,  580,  343,  344,  344,  344,  577,  345,  345,  345,
      576,  344,  575,  632,  340,  345,  344,  341,  574,  346,
      345,  346,  346,  346,  347,  573,  347,  347,  347,  572,
      571,  342,  570,  348,  343,  348,  348,  348,  569,  568,
      346,  567,  349,  347,  349,  349,  349,  350,  344,  350,
      350,  350,  345,  351,  564,  351,  351,  351,  348,  462,

      462,  462,  563,  350,  562,  561,  351,  462,  352,  349,
      352,  352,  352,  353,  560,  353,  353,  353,  354,  559,
      354,  354,  354,  355,  556,  355,  355,  355,  356,  555,
      356,  356,  356,  352,  554,  409,  355,  409,  409,  409,
      353,  404,  404,  404,  410,  354,  410,  410,  410,  404,
      405,  405,  405,  356,  404,  553,  552,  551,  405,  406,
      406,  406,  412,  405,  412,  412,  412,  406,  407,  407,
      407,  411,  406,  411,  411,  411,  407,  408,  408,  408,
      413,  407,  413,  413,  413,  408,  404,  550,  547,  414,
      408,  414,  414,  414,  411,  405,  415,  413,  415,  415,

      415,  546,  544,  416,  406,  416,  416,  416,  543,  542,
      541,  540,  416,  407,  414,  417,  537,  417,  417,  417,
      535,  418,  408,  418,  418,  418,  419,  534,  419,  419,
      419,  461,  461,  461,  463,  463,  463,  533,  532,  461,
      531,  529,  463,  417,  461,  528,  527,  463,  464,  464,
      464,  465,  465,  465,  526,  525,  464,  524,  523,  465,
      522,  464,  521,  520,  465,  466,  466,  466,  519,  467,
      467,  467,  518,  466,  517,  516,  461,  467,  466,  463,
      515,  510,  467,  508,  468,  468,  468,  469,  507,  469,
      469,  469,  468,  464,  506,  504,  465,  468,  470,  503,

      470,  470,  470,  501,  500,  499,  498,  469,  497,  470,
      466,  496,  495,  471,  467,  471,  471,  471,  472,  494,
      472,  472,  472,  473,  493,  473,  473,  473,  472,  468,
      492,  511,  473,  511,  511,  511,  512,  491,  512,  512,
      512,  513,  490,  513,  513,  513,  514,  489,  514,  514,
      514,  548,  488,  548,  548,  548,  578,  487,  578,  578,
      578,  513,  486,  549,  548,  549,  549,  549,  579,  485,
      579,  579,  579,  514,  605,  484,  605,  605,  605,  626,
      549,  626,  626,  626,  483,  482,  481,  480,  479,  478,
      475,  579,  459,  458,  457,  456,  605,  671,  671,  671,

      671,  671,  671,  671,  671,  671,  671,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  673,  455,  454,
      453,  673,  673,  674,  452,  450,  674,  674,  675,  675,
      675,  675,  449,  675,  675,  675,  675,  676,  676,  447,
      446,  676,  676,  677,  677,  445,  444,  677,  677,  678,
      678,  678,  678,  678,  678,  678,  678,  678,  678,  679,
      679,  679,  679,  443,  442,  679,  679,  679,  679,  680,
      680,  680,  680,  680,  680,  680,  680,  441,  680,  681,
      440,  439,  681,  681,  682,  682,  682,  682,  682,  682,
      682,  682,  682,  682,  683,  683,  683,  683,  683,  683,

      683,  683,  683,  683,  684,  438,  437,  684,  684,  685,
      685,  436,  435,  685,  685,  686,  434,  433,  686,  686,
      687,  432,  431,  687,  687,  688,  428,  427,  688,  689,
      426,  425,  689,  690,  424,  423,  690,  691,  401,  397,
      691,  691,  692,  395,  394,  692,  693,  393,  392,  693,
      694,  694,  694,  694,  694,  694,  694,  694,  694,  694,
      695,  391,  390,  695,  696,  389,  387,  696,  697,  385,
      384,  697,  698,  383,  382,  698,  699,  699,  699,  699,
      699,  699,  699,  699,  699,  699,  700,  700,  700,  700,
      700,  700,  700,  700,  700,  700,  701,  381,  701,  701,

      701,  701,  701,  701,  701,  701,  380,  379,  378,  376,
      375,  374,  373,  372,  371,  369,  368,  367,  364,  363,
      362,  360,  357,  338,  337,  335,  333,  332,  331,  330,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  314,  313,  312,  310,  309,  308,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  291,  270,  269,  268,  267,  266,  265,  264,  263,
      262,  261,  260,  259,  256,  255,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  239,  238,  237,
      235,  234,  233,  215,  189,  188,  187,  186,  185,  184,

      183,  182,  181,  180,  179,  178,  176,  175,  174,  172,
      171,  170,  168,  166,  164,  163,  162,  155,  152,  130,
      108,  107,  102,   97,   96,   95,   90,   88,   86,   85,
       84,   81,   59,   45,   35,   33,   25,    2,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,

      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int gram__flex_debug;
int gram__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *gram_text;
#line 1 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
/* -*- c-file-style: "stroustrup"; -*- */
/* Bison Grammar Scanner                             -*- C -*-

   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.

   This file is part of Bison, the GNU Compiler Compiler.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
/* Copyright (C) 2010 by the Regents of the University of California. */
#define YY_NO_INPUT 1
#line 29 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"

#include <climits>
#include "horn.h"
#include "parse-horn.h"

using namespace std;

#define FLEX_PREFIX(Id) gram_ ## Id

static size_t no_cr_read (FILE *, char *, size_t);

static void handle_syncline (char *, location);
static void unexpected_eof (const char *, char const *);
static void unexpected_newline (const char *, char const *);

static int percent_percent_count;

static symbol_convention convention = CAP_LOW;

/* Strings and characters in directives/rules. */

/* A complex tag, with nested angles brackets. */

/* Four types of user code:
- prologue (code between `%{' `%}' in the first section, before %%);
- actions, printers, union, etc, (between braced in the middle section);
- epilogue (everything after the second %%). 
- predicate (code between `%?{' and `{' in middle section); */

/* C and C++ comments in code. */

/* Strings and characters in code. */

/* POSIX says that a tag must be both an id and a C union member, but
   historically almost any character is allowed in a tag.  We disallow
   NUL, as this simplifies our implementation.  We disallow angle
   bracket to match them in nested pairs: several languages use them
   for generics/template types.  */
/* Zero or more instances of backslash-newline.  Following GCC, allow
   white space between the backslash and the newline.  */
#line 1148 "scan-horn.cc"

#define INITIAL 0
#define SC_ESCAPED_STRING 1
#define SC_ESCAPED_CHARACTER 2
#define SC_TAG 3
#define SC_PROLOGUE 4
#define SC_BRACED_CODE 5
#define SC_EPILOGUE 6
#define SC_PREDICATE 7
#define SC_COMMENT 8
#define SC_LINE_COMMENT 9
#define SC_STRING 10
#define SC_CHARACTER 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gram_lex_destroy (void );

int gram_get_debug (void );

void gram_set_debug (int debug_flag  );

YY_EXTRA_TYPE gram_get_extra (void );

void gram_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *gram_get_in (void );

void gram_set_in  (FILE * in_str  );

FILE *gram_get_out (void );

void gram_set_out  (FILE * out_str  );

yy_size_t gram_get_leng (void );

char *gram_get_text (void );

int gram_get_lineno (void );

void gram_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gram_wrap (void );
#else
extern int gram_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( gram_text, gram_leng, 1, gram_out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gram_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gram_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, gram_in))==0 && ferror(gram_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(gram_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gram_lex (void);

#define YY_DECL int gram_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after gram_text and gram_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( gram_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(gram_text[gram_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 92 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"


  /* Nesting level.  Either for nested braces, or nested angle brackets
     (but not mixed).  */
  int nesting;

  /* Parent context state, when applicable.  */
  int context_state;




  /*-----------------------.
  | Scanning white space.  |
  `-----------------------*/

#line 1359 "scan-horn.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! gram_in )
			gram_in = stdin;

		if ( ! gram_out )
			gram_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gram_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				gram__create_buffer(gram_in,YY_BUF_SIZE );
		}

		gram__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of gram_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 671 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 670 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/* Comments and white space.  */
case 1:
YY_RULE_SETUP
#line 111 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
warn_at (gram_text, _("stray `,' treated as white space"));
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 112 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 114 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    handle_syncline (gram_text + sizeof "#line " - 1, gram_text);
  }
	YY_BREAK

/*----------------------------.
  | Scanning Bison directives.  |
  `----------------------------*/
/* For directives that are also command line options, the regex must be
	"%..."
     after "[-_]"s are removed, and the directive must match the --long
     option name, with a single string argument.  Otherwise, add exceptions
     to ../build-aux/cross-options.pl.  */


case 4:
YY_RULE_SETUP
#line 132 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_CODE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 133 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_CONVENTION;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 134 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_FLAG;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 135 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_DEFAULT_PREC;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 136 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_DEFINE;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 137 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_DEFINES;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 138 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_DESTRUCTOR;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 139 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_DPREC;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 140 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_ERROR_VERBOSE;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 141 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_EXPECT;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 142 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_EXPECT_RR;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 143 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_FILE_PREFIX;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 144 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_YACC;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 145 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_INITIAL_ACTION;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 146 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_GLR_PARSER;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 147 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_INTERACTIVE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 148 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_LANGUAGE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 149 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_LEFT;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 150 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PARAM;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 151 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_FLAG;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 152 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_MERGE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 153 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_NAME_PREFIX;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 154 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_NO_DEFAULT_PREC;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 155 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_NO_LINES;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 156 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_NONASSOC;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 157 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_NONDETERMINISTIC_PARSER;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 158 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_NTERM;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 159 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_OUTPUT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 160 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PARAM;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 161 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PARAM;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 162 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PREC;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 163 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PRECEDENCE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 164 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PRINTER;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 165 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_FLAG;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 166 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_REQUIRE;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 167 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_RIGHT;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 168 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_SKELETON;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 169 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_START;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 170 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_TOKEN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 171 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_TOKEN;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 172 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_TOKEN_TABLE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 173 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_TYPE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 174 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_UNION;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 175 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_VERBOSE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 176 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_YACC;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 178 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_EXPAND;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 179 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PERCENT_PREFER;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 181 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return ANY;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 182 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return UPPER;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 183 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return LOWER;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 184 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return LETTER;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 185 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return DIGIT;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 186 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return HEX;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 187 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return ALNUM;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 188 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return SPACE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 189 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return BLANK;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 190 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return CONTROL;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 191 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return GRAPHIC;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 192 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PRINTABLE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 193 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PUNCTUATION;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 196 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return BOL;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 197 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return EOL;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 198 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return ENDFILE;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 200 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    complain_at (gram_text, _("invalid directive: '%s'"), gram_text);
  }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return gram_text[0];
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return PLUS_EQ;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 207 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return DOTDOT;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 209 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return UNDERSCORE_ID;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 210 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
                                      switch (convention) {
                                      case LOW_CAP: case ANY_ALLCAP:
                                          return NONTERM_ID;
                                      default:
                                          return TERM_ID;
                                      }
                                    }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 218 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
                                      switch (convention) {
                                      case LOW_CAP: case ALLCAP_ANY:
                                          return NONTERM_ID;
                                      default:
                                          return TERM_ID;
                                      }
                                    }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 226 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
                                      switch (convention) {
                                      case CAP_LOW: case ALLCAP_ANY:
                                          return NONTERM_ID;
                                      default:
                                          return TERM_ID;
                                      }
                                    }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 234 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return OTHER_ID;
	YY_BREAK
case 76:
#line 237 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
case 77:
YY_RULE_SETUP
#line 237 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return INT;
	YY_BREAK
/* Identifiers may not start with a digit.  Yet, don't silently
     accept "1FOO" as "1 FOO".  */
case 78:
YY_RULE_SETUP
#line 241 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    complain_at (gram_text, _("invalid identifier: '%s'"), gram_text);
  }
	YY_BREAK
/* Characters.  */
case 79:
YY_RULE_SETUP
#line 246 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ BEGIN SC_ESCAPED_CHARACTER; yymore (); }
	YY_BREAK
/* Strings. */
case 80:
YY_RULE_SETUP
#line 249 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ BEGIN SC_ESCAPED_STRING; yymore (); }
	YY_BREAK
/* Prologue. */
case 81:
YY_RULE_SETUP
#line 252 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ BEGIN SC_PROLOGUE; yymore (); }
	YY_BREAK
/* Code in between braces.  */
case 82:
YY_RULE_SETUP
#line 255 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    nesting = 0;
    BEGIN SC_BRACED_CODE;
    yymore ();
  }
	YY_BREAK
/* Semantic predicate. */
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 262 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    nesting = 0;
    BEGIN SC_PREDICATE;
    yymore ();
  }
	YY_BREAK
/* A type. */
case 84:
YY_RULE_SETUP
#line 269 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return TAG_ANY;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 270 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return TAG_NONE;
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 271 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
return TAG;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 272 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    nesting = 0;
    BEGIN SC_TAG;
    yymore ();
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 278 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    if ((percent_percent_count += 1) == 2)
      BEGIN SC_EPILOGUE;
    return PERCENT_PERCENT;
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 284 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    complain_at (gram_text, _("invalid character: '%s'"), gram_text);
  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 288 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    while (gram_leng > 0 && gram_text[gram_leng-1] == '\0')
        gram_leng -= 1;
    yyterminate ();
  }
	YY_BREAK

/*--------------------------------------------------------------.
  | Supporting \0 complexifies our implementation for no expected |
  | added value.                                                  |
  `--------------------------------------------------------------*/


case 90:
YY_RULE_SETUP
#line 303 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
complain_at (gram_text, _("invalid null character"));
	YY_BREAK

/*------------------------------------------------------------.
  | Scanning a C comment.  The initial `/ *' is already eaten.  |
  `------------------------------------------------------------*/


case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 313 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); BEGIN context_state; }
	YY_BREAK
case YY_STATE_EOF(SC_COMMENT):
#line 314 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
unexpected_eof (gram_text, "*/"); BEGIN context_state;
	YY_BREAK

/*--------------------------------------------------------------.
  | Scanning a line comment.  The initial `//' is already eaten.  |
  `--------------------------------------------------------------*/


case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 324 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); BEGIN context_state; }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 325 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
yymore ();
	YY_BREAK
case YY_STATE_EOF(SC_LINE_COMMENT):
#line 326 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); BEGIN context_state; }
	YY_BREAK

/*------------------------------------------------.
  | Scanning a Bison string, including its escapes. |
  | The initial quote is already eaten.             |
  `------------------------------------------------*/


case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 337 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    if (gram_text[0] == '\n')
      unexpected_newline (gram_text, "\"");
    BEGIN INITIAL;
    return STRING;
  }
	YY_BREAK
case YY_STATE_EOF(SC_ESCAPED_STRING):
#line 343 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    unexpected_eof (gram_text, "\"");
    BEGIN INITIAL;
    return STRING;
  }
	YY_BREAK

/*------------------------------------.
  | Scanning a Bison character literal. |
  `------------------------------------*/


case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 356 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    if (gram_text[0] == '\n')
      unexpected_newline (gram_text, "'");
    BEGIN INITIAL;
    if (real_length (string (gram_text+1, gram_leng-2)) != 1)
        complain_at (gram_text, 
                     "single-quoted literals must contain one character");
    return CHAR;
  }
	YY_BREAK
case YY_STATE_EOF(SC_ESCAPED_CHARACTER):
#line 365 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    unexpected_eof (gram_text, "'");
    BEGIN INITIAL;
    return CHAR;
  }
	YY_BREAK

/*-----------------------------------------------------------.
  | Scanning a Bison nested tag.  The initial angle bracket is |
  | already eaten.                                             |
  `-----------------------------------------------------------*/


case 96:
YY_RULE_SETUP
#line 379 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    --nesting;
    if (nesting < 0)
      {
        BEGIN INITIAL;
        return TAG;
      }
    yymore ();
  }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 389 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 390 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ nesting += 1; yymore (); }
	YY_BREAK
case YY_STATE_EOF(SC_TAG):
#line 392 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    unexpected_eof (gram_text, ">");
    BEGIN INITIAL;
    return TAG;
  }
	YY_BREAK

/*----------------------------.
  | Decode escaped characters.  |
  `----------------------------*/


case 99:
YY_RULE_SETUP
#line 405 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ complain_at (gram_text, "invalid escape: \\X"); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 406 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ complain_at (gram_text, "invalid \\x escape"); }
	YY_BREAK
case 101:
#line 408 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
case 102:
#line 409 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
case 103:
#line 410 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
case 104:
#line 411 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 411 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 413 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
                          complain_at (gram_text, "Unicode escapes not currently supported."); }
	YY_BREAK

/*--------------------------------------------.
  | Scanning user-code characters and strings.  |
  `--------------------------------------------*/


case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 424 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); }
	YY_BREAK



case 108:
YY_RULE_SETUP
#line 429 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ BEGIN context_state; yymore (); }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 430 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ unexpected_newline (gram_text, "'"); BEGIN context_state; }
	YY_BREAK
case YY_STATE_EOF(SC_CHARACTER):
#line 431 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ unexpected_eof (gram_text, "'"); BEGIN context_state; }
	YY_BREAK



case 110:
YY_RULE_SETUP
#line 436 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ BEGIN context_state; yymore (); }
	YY_BREAK
case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 437 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ unexpected_newline (gram_text, "\""); BEGIN context_state; }
	YY_BREAK
case YY_STATE_EOF(SC_STRING):
#line 438 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ unexpected_eof (gram_text, "\""); BEGIN context_state; }
	YY_BREAK

/*---------------------------------------------------.
  | Strings, comments etc. can be found in user code.  |
  `---------------------------------------------------*/


case 112:
YY_RULE_SETUP
#line 448 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_CHARACTER;
  }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 453 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_STRING;
  }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 458 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_COMMENT;
  }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 463 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_LINE_COMMENT;
  }
	YY_BREAK

/*----------------------------------------------------.
  | Scanning some code in braces (actions, predicates). |
  `----------------------------------------------------*/


case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 478 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ nesting++; yymore (); }
	YY_BREAK
case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 479 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ nesting--; yymore (); }
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 481 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{ yymore (); }
	YY_BREAK
case YY_STATE_EOF(SC_BRACED_CODE):
case YY_STATE_EOF(SC_PREDICATE):
#line 483 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    int token = (YY_START == SC_BRACED_CODE) ? BRACED_CODE : BRACED_PREDICATE;
    unexpected_eof (gram_text, "}");
    BEGIN INITIAL;
    return token;
  }
	YY_BREAK



case 119:
YY_RULE_SETUP
#line 493 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    --nesting;
    if (nesting < 0)
      {
	BEGIN INITIAL;
	return BRACED_CODE;
      }
    else
      yymore ();
  }
	YY_BREAK



case 120:
YY_RULE_SETUP
#line 507 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    --nesting;
    if (nesting < 0)
      {
	BEGIN INITIAL;
	return BRACED_PREDICATE;
      }
    else
      yymore ();
  }
	YY_BREAK

/*--------------------------------------------------------------.
  | Scanning some prologue: from "%{" (already scanned) to "%}".  |
  `--------------------------------------------------------------*/


case 121:
YY_RULE_SETUP
#line 525 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    BEGIN INITIAL;
    return PROLOGUE;
  }
	YY_BREAK
case YY_STATE_EOF(SC_PROLOGUE):
#line 530 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    unexpected_eof (gram_text, "%}");
    BEGIN INITIAL;
    return PROLOGUE;
  }
	YY_BREAK

/*---------------------------------------------------------------.
  | Scanning the epilogue (everything after the second "%%", which |
  | has already been eaten).                                       |
  `---------------------------------------------------------------*/


case YY_STATE_EOF(SC_EPILOGUE):
#line 545 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
{
    BEGIN INITIAL;
    while (gram_leng > 0 && gram_text[gram_leng-1] == '\0')
        gram_leng -= 1;
    return EPILOGUE;
  }
	YY_BREAK

case 122:
#line 555 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 555 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
yymore ();
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 557 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2355 "scan-horn.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gram_in at a new source and called
			 * gram_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = gram_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( gram_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * gram_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of gram_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gram_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gram_restart(gram_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gram_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 75);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 671 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 75;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 671 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 670);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gram_restart(gram_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gram_wrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve gram_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void gram_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        gram_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            gram__create_buffer(gram_in,YY_BUF_SIZE );
	}

	gram__init_buffer(YY_CURRENT_BUFFER,input_file );
	gram__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void gram__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gram_pop_buffer_state();
	 *		gram_push_buffer_state(new_buffer);
     */
	gram_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gram__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (gram_wrap()) processing, but the only time this flag
	 * is looked at is after gram_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void gram__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	gram_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE gram__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gram_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gram__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gram_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gram__create_buffer()" );

	b->yy_is_our_buffer = 1;

	gram__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with gram__create_buffer()
 * 
 */
    void gram__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gram_free((void *) b->yy_ch_buf  );

	gram_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gram_restart() or at EOF.
 */
    static void gram__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	gram__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gram__init_buffer was _probably_
     * called from gram_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void gram__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gram__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void gram_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	gram_ensure_buffer_stack();

	/* This block is copied from gram__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gram__switch_to_buffer. */
	gram__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void gram_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	gram__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		gram__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gram_ensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gram_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gram_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gram_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gram_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gram__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gram_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gram__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gram__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gram_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       gram__scan_bytes() instead.
 */
YY_BUFFER_STATE gram__scan_string (yyconst char * yystr )
{
    
	return gram__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to gram_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gram__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gram_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gram__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gram__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gram__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gram_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		gram_text[gram_leng] = (yy_hold_char); \
		(yy_c_buf_p) = gram_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		gram_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int gram_get_lineno  (void)
{
        
    return gram_lineno;
}

/** Get the input stream.
 * 
 */
FILE *gram_get_in  (void)
{
        return gram_in;
}

/** Get the output stream.
 * 
 */
FILE *gram_get_out  (void)
{
        return gram_out;
}

/** Get the length of the current token.
 * 
 */
yy_size_t gram_get_leng  (void)
{
        return gram_leng;
}

/** Get the current token.
 * 
 */

char *gram_get_text  (void)
{
        return gram_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void gram_set_lineno (int  line_number )
{
    
    gram_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see gram__switch_to_buffer
 */
void gram_set_in (FILE *  in_str )
{
        gram_in = in_str ;
}

void gram_set_out (FILE *  out_str )
{
        gram_out = out_str ;
}

int gram_get_debug  (void)
{
        return gram__flex_debug;
}

void gram_set_debug (int  bdebug )
{
        gram__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gram_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    gram_in = stdin;
    gram_out = stdout;
#else
    gram_in = (FILE *) 0;
    gram_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gram_lex_init()
     */
    return 0;
}

/* gram_lex_destroy is for both reentrant and non-reentrant scanners. */
int gram_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gram__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gram_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	gram_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gram_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gram_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gram_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gram_free (void * ptr )
{
	free( (char *) ptr );	/* see gram_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 557 "/Users/impguard/Dropbox/Documents/college/fa2013/cs164/proj/root/src/horn/src/scan-horn.l"



string current_file;
string program_name;

text_buffer input_buffer;
static const char *last_token_end;

lstring last_skipped_text;

/** Set convention for distinguishing terminals from nonterminals to 
 *  CONVENTION. */
void
set_lexical_convention(symbol_convention new_convention)
{
  switch (new_convention) {
  case CAP_LOW: case LOW_CAP: case ALLCAP_ANY: case ANY_ALLCAP:
    convention = new_convention;
    return;
  default:
    complain ("Invalid combination of case conventions");
    return;
  }
}

/* Read bytes from FP into buffer BUF of size SIZE.  Return the
   number of bytes read.  Remove '\r' from input, treating \r\n
   and isolated \r as \n.  */

static size_t
no_cr_read (FILE *fp, char *buf, size_t size)
{
  size_t bytes_read = fread (buf, 1, size, fp);
  if (bytes_read)
    {
      char *w = (char*) memchr (buf, '\r', bytes_read);
      if (w)
	{
	  char const *r = ++w;
	  char const *lim = buf + bytes_read;

	  for (;;)
	    {
	      /* Found an '\r'.  Treat it like '\n', but ignore any
		 '\n' that immediately follows.  */
	      w[-1] = '\n';
	      if (r == lim)
		{
		  int ch = getc (fp);
		  if (ch != '\n' && ungetc (ch, fp) != ch)
		    break;
		}
	      else if (*r == '\n')
		r++;

	      /* Copy until the next '\r'.  */
	      do
		{
		  if (r == lim)
		    return w - buf;
		}
	      while ((*w++ = *r++) != '\r');
	    }

	  return w - buf;
	}
    }

  return bytes_read;
}

/*----------------------------------------------------------------.
| Handle `#line INT "FILE"'.  ARGS has already skipped `#line '.  |
`----------------------------------------------------------------*/

static void
handle_syncline (char *args, location loc)
{
  warn_at (gram_text, _("#line directives are not supported"));
  return;
}


/*----------------------------------------------------------------.
| For a token or comment starting at START, report message MSGID, |
| which should say that an end marker was found before		  |
| the expected TOKEN_END.					  |
`----------------------------------------------------------------*/

static void
unexpected_end (const char* start, char const *msgid, char const *token_end)
{
  complain_at (start, _(msgid), token_end);
}


/*------------------------------------------------------------------------.
| Report an unexpected EOF in a token or comment starting at START.       |
| An end of file was encountered and the expected TOKEN_END was missing.  |
`------------------------------------------------------------------------*/

static void
unexpected_eof (const char* start, char const *token_end)
{
  unexpected_end (start, _("missing `%s' at end of file"), token_end);
}


/*----------------------------------------.
| Likewise, but for unexpected newlines.  |
`----------------------------------------*/

static void
unexpected_newline (const char* start, char const *token_end)
{
  unexpected_end (start, _("missing `%s' at end of line"), token_end);
}


/*---------------------------------------------------------------------------.
| Initialize the scanner to scan the contents of FILE, denoting it as NAME.  |
`---------------------------------------------------------------------------*/

void
gram_scanner_initialize (FILE *input, const string& name)
{
  char chunk[YY_BUF_SIZE];
  yy_size_t chunk_size;

  input_buffer.clear ();

  while ((chunk_size = no_cr_read (input, chunk, YY_BUF_SIZE)) > 0)
    input_buffer.append (chunk, chunk_size);

  input_buffer.append ("\000\000", 2);

  last_token_end = input_buffer.data ();
  gram__switch_to_buffer (gram__scan_buffer (input_buffer.data (), 
				       input_buffer.data_size ()));

  yylloc = input_buffer.data ();
  set_err_loc (yylloc);
  current_file = name;
  percent_percent_count = 0;
}


/*----------------------------------------.
 * The line number on which *TEXT occurs. |
 `---------------------------------------*/

int
location_line_number (location loc)
{
  /* NOTE: must compensate for case where the static initialization
   * of TOKEN_LIST_OBJ precedes that of std::string. */
  int line;
  if (!init_phase_done 
      || loc == NULL
      || input_buffer.data () > loc
      || loc > input_buffer.data () + input_buffer.size () - 2)
      return 0;
  line = 1;
  for (location p = strchr (input_buffer.data (), '\n'); 
       p < loc;
       p = strchr (p+1, '\n')) {
      if (p == NULL)
          break;
      line += 1;
  }
  return line;
}

/*------------------------------------------------------------------.
 * Print LOCATION (relative to input file) on FILE in Unix format.  |
`------------------------------------------------------------------*/

int
location_print (FILE* file, location loc)
{
  return fprintf (file, "%s:%d", current_file.c_str (),
                  location_line_number (loc));
}

/*---------------------------------------------------.
| Output final buffer contents, as modified, to OUT. |
`---------------------------------------------------*/

void
gram_scanner_write_file (FILE* out)
{
  input_buffer.erase (input_buffer.data () + input_buffer.data_size () - 2,
		      2);
  input_buffer.fwrite (out);
}

/*-----------------------------------------------.
| Free all the memory allocated to the scanner.  |
`-----------------------------------------------*/

void
gram_scanner_free ()
{
  gram_lex_destroy ();
}

/*------------------.
| Main entry point. |
`------------------*/

int
gram_scan ()
{
    yylval = NULL;
    int c = gram_lex ();
    if (yylval == NULL)
      yylval = new Token (lstring (gram_text, gram_leng),
			  lstring (last_token_end, gram_text - last_token_end), 
			  c);
    last_token_end = gram_text + gram_leng;
    yylloc = gram_text;
    set_err_loc (yylloc);
    return c;
}

