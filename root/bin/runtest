#!/bin/bash

function runtest-usage {
  echo "Usage: runtest [-hvrbk] [-d TESTDIR] [-o FILE] [-p PHASE] TEST"
  echo "  -h          : Displays usage."
  echo "  -v          : Verbose output, prints the original "
  echo "                file at the end."
  echo "  -r          : Displays raw output."
  echo "  -b          : Looks in TESTDIR and runs all"
  echo "                relevant tests. Ignores any other"
  echo "                options. See batch-tests."
  echo "  -f          : Runs all relevant tests without"
  echo "                pausing. Used in conjunction with"
  echo "                -b. See batch-tests."
  echo "  -k          : Looks in TESTDIR and lists all"
  echo "                relevant keywords. Ignores other"
  echo "                flags."
  echo "  -d TESTDIR  : Looks in TESTDIR for the TEST."
  echo "  -o FILE     : Saves output in FILE.cc and FILE."
  echo "  -p PHASE    : Which phase to use for apyc."
}

function check-error {
  if [ $1 != 0 ]; then
    echo "early exit: running test failed."
    exit 1
  fi
}

# Phase 1 or 2
function runp12 {
  echo ">> Running apyc..."
  ./apyc --phase=$PHASE -o $OUTFILE.ast $TESTDIR/$TEST.py
  check-error $?

  echo ">> Generated AST..."; echo
  if [ $PHASE == 1 ] || $RAW; then
    cat $OUTFILE.ast; echo; echo
  else
    output-cleaner -a $OUTFILE.ast; echo
  fi

  echo ">> Unparsing AST..."; echo
  PARAMS=
  if [ $PHASE != 1 ]; then
    PARAMS="--remove-extensions --alpha"
  fi
  pyunparse $PARAMS -o $OUTFILE $OUTFILE.ast
  check-error $?

  if [ $PHASE == 1 ] || $RAW; then
    cat $OUTFILE; echo
  else
    output-cleaner -p $OUTFILE; echo
  fi

  # Save or remove files
  if [ -z $OUT ]; then
    rm $OUTFILE $OUTFILE.ast
  else
    printf ">> Saved AST in %s. Saved pyunparsed program in %s.\n" \
    "$OUTFILE.ast" "$OUTFILE"
  fi
}

function runp3 {
  echo ">> Running apyc..."
  ./apyc -S -o $OUTFILE $TESTDIR/$TEST.py
  check-error $?

  echo ">> Generated C++ file..."; echo
  cat $OUTFILE; echo

  # Save or remove files
  if [ -z $OUT ]; then
    rm $OUTFILE
  else
    printf ">> Saved generated file in %s.\n" "$OUTFILE"
  fi
}

function runp4 {
  RETVAL=
  echo ">> Running apyc..."
  ./apyc -o $OUTFILE $TESTDIR/$TEST.py
  check-error $?

  echo ">> Running generated binary..."
  ./$OUTFILE > $OUTFILE.out

  echo ">> Output after running C++ file"; echo
  echo "-----"; cat $OUTFILE.out; echo "-----"; echo

  echo ">> Expected output"; echo
  if [ -a $TESTDIR/$TEST.std ]; then
    echo "-----"; cat $TESTDIR/$TEST.std; echo "-----"; echo
    if diff $TESTDIR/$TEST.std $OUTFILE.out >/dev/null; then
      echo ">> Test succeeded"
      RETVAL=0
    else
      echo ">> Test failed. Output does not match expected."
      RETVAL=1
    fi
  else
    echo "No standard file found."; echo
  fi

  # Save or remove files
  if [ -z $OUT ]; then
    rm $OUTFILE $OUTFILE.out
  else
    printf ">> Saved generated file in %s. Saved output in %s.\n" \
    "$OUTFILE" "$OUTFILE.out"
  fi

  return $RETVAL
}

# ----- Gather arguments ----- #

# Flags
TEST=
VERBOSE=false
RAW=false
BATCH=false
FORCE=false
KEYS=false
TESTDIR=./tests/correct3
OUT=
PHASE=

# Reset getopts
OPTIND=1
while getopts "hvrbfkd:o:p:" O; do
  case $O in
    v)
      VERBOSE=true
      ;;
    r)
      RAW=true
      ;;
    b)
      BATCH=true
      ;;
    f)
      FORCE=true
      ;;
    k)
      KEYS=true
      ;;
    d)
      TESTDIR=$OPTARG
      ;;
    o)
      OUT=$OPTARG
      ;;
    p)
      PHASE=$OPTARG
      if [ $PHASE -gt 4 ] || [ $PHASE -lt 1 ]; then
        echo "Improper phase number."; exit
      fi
      ;;
    h|?)
      runtest-usage; exit
      ;;
  esac
done

# Shift to get arguments
shift $((OPTIND-1))

# ----- Batch tests ----- #

if $KEYS; then
  # If keys option specified
  batch-tests -d $TESTDIR -k; exit
elif $BATCH; then
  # If batch tests specified
  if $FORCE; then
    batch-tests -f -d $TESTDIR $*; exit
  else
    batch-tests -d $TESTDIR $*; exit
  fi
fi

# ----- Single test ------ #

# Generate test name
if [ -z $1 ]; then
  runtest-usage; exit
else
  TEST=$1
fi

# Generate output file name
OUTFILE=
if [ -z $OUT ]; then
  OUTFILE="output"
else
  OUTFILE=$OUT
fi

# Compile
echo ">> Compiling..."
make 1>/dev/null
check-error $?

# Process depending on phase
SUCCESS=
if [ -z $PHASE ]; then
  runp4
  SUCCESS=$?
elif [ $PHASE == 3 ]; then
  runp3
else
  runp12
fi

# If verbose print original file
if $VERBOSE; then
  echo ">> Original file..."; echo
  cat $TESTDIR/$TEST.py; echo
fi

# Exit depending on tests success for phase 4
if [ SUCCESS != 0 ]; then
  exit $SUCCESS
fi
