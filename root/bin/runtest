#!/bin/bash

# Move to home directory, should have used source init to switch to project directory.
cd $HOME

function runtest-usage {
  echo "Usage: runtest [-vs] [-d TESTDIR] [-o FILE] [-p PHASE] TEST"
  echo "  -v          : Verbose output                        [Default: false]"
  echo "  -s          : Saves output.                         [Default: false]"
  echo "  -d TESTDIR  : Looks in TESTDIR for the TEST.        [Default: tests/correct2]"
  echo "  -o FILE     : Saves output in FILE.ast and FILE.    [Default: out (Overrides SAVE)]"
  echo "  -p PHASE    : Which phase to use for apyc.          [Default: 2]"
  echo "  -a          : Looks in TESTDIR and runs all         [Default: assign]"
  echo "                relevant tests. See batch-tests.      [Default: false]"
  echo "  -k          : Looks in TESTDIR and lists all        [Default: false]"
  echo "                relevant keywords. Ignores other"
  echo "                flags."
}

# Flags
TEST=
OUT=false
FILE=out
TESTDIR=./tests/correct2
PHASE=2
VERBOSE=false
SAVE=false
LIST=false
COLLECT=false

# Reset getopts
OPTIND=1
while getopts "vsokao:d:p:h" O; do
  case $O in
    v)
      VERBOSE=true
      ;;
    s)
      SAVE=true
      ;;
    k)
      LIST=true
      ;;
    a)
      COLLECT=true
      ;;
    o)
      OUT=true; FILE=$OPTARG
      ;;
    d)
      TESTDIR=$OPTARG
      ;;
    p)
      PHASE=$OPTARG
      ;;
    h|?)
      runtest-usage; exit
      ;;
  esac
done
# Shift to get arguments
shift $((OPTIND-1))
# Collect tests
if $LIST; then
  batch-tests -d $TESTDIR/ -k; exit
elif $COLLECT; then
  batch-tests -d $TESTDIR/ $*; exit
elif [ -z $1 ]; then
  runtest-usage; exit
else
  TEST=$1.py
fi

# Compile
echo ">> Compiling..."
make 1>/dev/null

if [ $? != 0 ]; then
  exit
fi

# Run apyc
echo ">> Running apyc..."
./apyc --phase=$PHASE -o $FILE.ast $TESTDIR/$TEST

if [ $? != 0 ]; then
  exit
fi

echo ">> Generated AST..."; echo
tail -n +0 $FILE.ast

# Unparse AST
echo; echo ">> Unparsing AST..."; echo
pyunparse -o $FILE $FILE.ast

cat $FILE;

# Save or remove files
if $OUT || $SAVE; then
  echo; printf ">> Saved AST in %s. Saved pyunparsed program in %s.\n" "$FILE.ast" "$FILE"; echo
else
  rm out out.ast
fi

# If verbose print original file
if $VERBOSE; then
  echo; echo ">> Original file..."; echo
  cat $TESTDIR/$TEST
fi
