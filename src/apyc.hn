/* -*- mode: fundamental; c-file-style: "stroustrup"; indent-tabs-mode: nil -*- */

/* apyc: Bison Parser */

/* Authors: YOUR NAMES HERE */

%define semantic_tree_type "AST"

%{
  #include <string>
  #include <stack>
  #include "apyc.h"
  #include "ast.h"

  using namespace std;

  static AST_Ptr theTree;
  static stack <int> indent_stack;
  static int bracket_count;

  /* Utilities */
  /** Return a new unop node corresponding to OPERANDS, which is the list of
   *  right-hand-side semantic values of a unop production (consisting of a
   *  token for the operator, followed by the AST for the operand). */
  static AST_Ptr make_unop (const List_Ptr& operands);

  /** Return a new binop node corresponding to OPERANDS, which is the list of
   *  right-hand-side semantic values of a binop production (consisting of an
   *  AST for the first operand, a token for the operator, and an AST for the
   *  second operand). */
  static AST_Ptr make_binop (const List_Ptr& operands);

  /** Return a new ID node, where the text of the identifier is given by
   *  TOKEN. */
  static AST_Ptr make_id (AST_Ptr& token);

  /** Return a new KEY node corresponding to OPERANDS. */
  static AST_Ptr make_expr (const int KEY, const List_Ptr& operands);


  /** Return the number of spaces in the leading whitespace (including tabs)
   * of a line. From left to right, the tab is replaced with one to eight
   * whitespace such that the number of whitespaces up to and including
   * the replacement is a multiple of eight. */
  static int count_leading_whitespaces (const char* text, const int text_size);

%}

%glr-parser
%expect-rr 3
%debug
%define error_function error

/* A token declaration such as
 *   %token INDENT
 * declares a new integer constant INDENT, which serves as a syntactic category
 * (suitable for output by the lexer) identifying a kind of token, which we
 * also often refer to as INDENT. A declaration such as
 *   %token IF "if"
 * defines a constant IF and makes it the syntactic category for the token
 * "if".  The built-in function yyexternal_token_name(...) maps between
 * syntactic categories (like IF) and the token strings defined in these
 * %token declarations (like "if").
 *
 * The Horn system uses tokens as leaf nodes and as AST node operators.  A
 * rule such as
 *     if_stmt: "if"^ expression ":"! ...
 * with no action, by default creates an AST node whose operator is an "if"
 * token (with syntactic category IF, given the %token declaration above).
 * When the node type does not correspond to a token that appears in the
 * program, we define a dummy token type that serves only as an AST
 * node type.  For example, we can define
 *     %token DICT_DISPLAY ...
 * and then use
 *     dict_display: "{"! key_datum_list? "}"!
 *              { $$ = $^(DICT_DISPLAY, $*); }
 * in the grammar (using DICT_DISPLAY only in actions, not as a grammar
 * symbol).
 *
 * In this skeleton, we've used a simple kludge to extract the printed forms
 * of AST operators from the operators themselves.  When a token such as IF
 * is the operator, yyexternal_token_name returns the operator name directly.
 * When there is no such correspondence, as with DICT_DISPLAY, we'll define
 *     %token DICT_DISPLAY "@dict_display"
 * Since "@dict_display" is not a valid token (it would be an error for this
 * to appear in any Python program) and does not appear in the grammar, this
 * declaration has no effect on the language recognized.  However, it
 * still provides an easy way to find the external name of an operator (just
 * strip off the leading "@").  (We can't just use "dict_display", since that
 * would tell Horn to define 'dict_display' as a token, whereas it would be a
 * simple identifier if it actually appeared in a Python program.  This is
 * where the kludginess comes in.) The AST_Tree::external_name method does
 * this conversion, converting tokens that are supposed to represent
 * node operators to printable strings.
 */

%token ID

%token PRINTLN "@println"
%token EMPTY
%token EXPR_LIST "@expr_list"
%token MODULE "@module"
%token BINOP "@binop"
%token UNOP "@unop"
/* Indentation */
%token INDENT
%token DEDENT
/* Basic Statements */
%token STMT_LIST "@stmt_list"
%token PRINT "@print"
%token RETURN "@return"
%token BREAK "@break"
%token CONTINUE "@continue"
%token NATIVE "@native"
/* Control Structures */
%token IF "@if"
%token FOR "@for"
%token WHILE "@while"
%token BLOCK "@block"
/* Assignments and Types */
%token ASSIGN "@assign"
%token TARGET_LIST "@target_list"
%token ATTR_REF "@attributeref"
%token SUBSCRIPTION "@subscription"
%token SLICING "@slicing"
%token TYPE "@type"
%token TYPED_ID "@typed_id"
%token TYPE_VAR "@type_var"
%token TYPE_LIST "@type_list"
%token TYPE_FORMALS_LIST "@type_formals_list"
%token FORMALS_LIST "@formals_list"
%token FUNCT_TYPE "@function_type"
/* Special structures */
%token DEFINITION "@def"
%token CLASS "@class"
/* Expressions */
%token COMPARE "@compare"
%token LCOMPARE "@left_compare"
%token AND "@and"
%token OR "@or"
%token IF_EXPR "@if_expr"
%token TUPLE "@tuple"
%token LIST "@list_display"
%token DICT "@dict_display"
%token PAIR "@pair"
%token CALL "@call"
%token EXPO "**"
/* Associativity + Precedence */
%left "or"
%left "and"
%left "in" "notin"
%left "is" "isnot"
%left '<' '>' "<=" ">=" "==" "!="
%left '+' '-'
%left '%' '*' '/'
%left "&&" "||"
%right EXPO

%%

program : stmt_list   { theTree = $^(MODULE, $*); $$ = NULL; }
        ;

/* REPLACE THE FOLLOWING WITH SOMETHING REAL. */

stmt_list :
      ( (statement '\n'!) | control_structure | definition | classdef | '\n'! )+ %expand
                      { $$ = $^(STMT_LIST, $*); }
    | /*empty*/       { $$ = $^(STMT_LIST); }
    ;

/* STATEMENT */
statement :
      basic_statement
    ;

// CLASS

classdef :
      "class"! ID "of" '['! type_formals ']'! ':'! '\n'! INDENT! block DEDENT!
                      { $$ = $^(CLASS,$ID,$type_formals,$block); }
    | "class" ID ":" '\n'! INDENT! block DEDENT!
                      { $$ = $^(CLASS,$ID,$^(TYPE_FORMALS_LIST),$block); }
    ;

type_formals :
      type_var (','! type_var)*
                      { $$ = $^(TYPE_FORMALS_LIST,$*); }
    ;

// DEFINITION

definition :
      "def"! ID '('! formals ')'! "::"! type ':'! '\n'! INDENT! block DEDENT!
                      { $$ = $^(DEFINITION,$ID,$formals,$type,$block); }
    | "def"! ID '('! formals ')'! ':'! '\n'! INDENT! block DEDENT!
                      { $$ = $^(DEFINITION,$ID,$formals,$^(EMPTY),$block); }
    ;

formals :
      (typed_id|ID) (','! (typed_id|ID))*
                      { $$ = $^(FORMALS_LIST,$*); }
    ;

block :
      ( (statement '\n'!) | control_structure | definition | '\n'! )+ %expand
                      { $$ = $^(BLOCK, $*); }
    | /*empty*/       { $$ = $^(BLOCK); }
    ;

basic_statement :
      print_stmt
    | assign
    | "return"! expression0
                    { $$ = $^(RETURN, $*); }
    | "break"!
                    { $$ = $^(BREAK); }
    | "continue"!
                    { $$ = $^(CONTINUE); }
    ;

control_structure :
      for_loop
    | while_loop
    | if_stmt
    ; 

for_loop :
      "for"! T=target_list "in"! E=expression ':'! S=basic_statement '\n'!
                    { $$ = $^(FOR,$T,$E,$S,$^(EMPTY)); }
    | "for"! T=target_list "in"! E=expression ':'! '\n'! INDENT! S=stmt_list DEDENT!
                    { $$ = $^(FOR,$T,$E,$S,$^(EMPTY)); }   
    | "for"! T=target_list "in"! E=expression ':'! '\n'! INDENT! S1=stmt_list DEDENT! S2=else_stmt
                    { $$ = $^(FOR,$T,$E,$S1,$S2); }
    ;

while_loop :
      "while"! E=expression ':'! S=basic_statement '\n'!
                    { $$ = $^(WHILE,$E,$S,$^(EMPTY)); }
    | "while"! E=expression ':'! '\n'! INDENT! S=stmt_list DEDENT!
                    { $$ = $^(WHILE,$E,$S,$^(EMPTY)); }   
    | "while"! E=expression ':'! '\n'! INDENT! S1=stmt_list DEDENT! S2=else_stmt
                    { $$ = $^(WHILE,$E,$S1,$S2); }
    ;

if_stmt :
      "if"! E=expression ':'! S=basic_statement '\n'!
                    { $$ = $^(IF, $E, $S, $^(EMPTY)); }
    | "if"! E=expression ':'! '\n'! I=INDENT! S1=stmt_list D=DEDENT!
                    { $$ = $^(IF, $E, $S1, $^(EMPTY)); }
    | "if"! E=expression ':'! '\n'! INDENT! S1=stmt_list DEDENT! S2=elif_stmts
                    { $$ = $^(IF, $E, $S1, $S2); }
    ;

elif_stmts :
      S=else_stmt
                    { $$ = $S; }
    | "elif"! E=expression ':'! S=basic_statement '\n'!
                    { $$ = $^(IF, $E, $S, $^(EMPTY)); }
    | "elif"! E=expression ':'! S1=basic_statement '\n'! S2=elif_stmts
                    { $$ =  $^(IF, $E, $^(STMT_LIST, $S1), $S2); }
    | "elif"! E=expression ':'! '\n'! INDENT! S1=stmt_list DEDENT! S2=elif_stmts
                    { $$ =  $^(IF, $E, $S1, $S2); }
    | "elif"! E=expression ':'! '\n'! INDENT! S1=stmt_list DEDENT!
                    { $$ =  $^(IF, $E, $S1, $^(EMPTY)); }
    ;

else_stmt :
      "else"!':'! B=basic_statement '\n'!
                    { $$ =  $^(STMT_LIST, $B); }
    | "else"!':'! '\n'! INDENT! S=stmt_list DEDENT!
                    { $$ =  $S; }
    ;

// native_stmt : 
//       "native"! STRING
//                     { $$ = $^(NATIVE, $*); }
//     ;


print_stmt :
      "print"! ">>"! expression
                    { $$ = $^(PRINTLN, $expression); }
    | "print"! ">>"! expression ','! expression_list
                    { $$ = $^(PRINTLN, $*); }
    | "print"! ">>"! expression ','! plist
                    { $$ = $^(PRINT, $*); }
    | "print"! expression_list0
                    { $$ = $^(PRINTLN, $^(EMPTY), $*); }
    | "print"! plist
                    { $$ = $^(PRINT, $^(EMPTY), $*); }
    ;

assign :
      target_list '='! right_side
                    { $$ = $^(ASSIGN, $*); }
    ;

target_list :
      target
    | tlist
    | target (','! target)+
                    { $$ = $^(TARGET_LIST, $*); }
    | '('! target_list ')'!
    ;

tlist :
      target (','! target)+ ','!
                    { $$ = $^(TARGET_LIST, $*); }
    ;


// TYPES

typed_id :
      ID "::"! type
                    { $$ = $^(TYPED_ID, $ID, $type);  }
                      //$$ = make_type(TYPED_ID, $*, 0);
                      //$$ = $^(TYPED_ID, make_id(ID), $type); 
    ;

type :
      type_id
    | type_var
    | '('! type_list0 ')'! "->"! type
                    { $$ = $^(FUNCT_TYPE, $type, $type_list0); }
    ;

type_id :
      ID "of"! '['! type_list0 ']'!
                    { $$ = $^(TYPE, $ID, $type_list0); }
                    //$$ = make_type(TYPE, $*, 0);
                    //$$ = $^(TYPE, make_id(ID), $type_list0); 
    | ID "of"! type_list1
                    { $$ = $^(TYPE, $ID, $type_list1); }
                      //$$ = make_type(TYPE, $*, 0);
                      //$$ = $^(TYPE, make_id(ID), $type); 
    | ID
                    { $$ = $^(TYPE, $ID, $^(TYPE_LIST)); }
                      //$$ = make_type(TYPE, $*, 1);
                      //$$ = $^(TYPE, make_id(ID), $^(TYPE_LIST)); 
    ;

type_var :
      TYPE_VAR
                    { $$ = $TYPE_VAR; }
    ;

type_list0:
      type ( ','! type )*
                    { $$ = $^(TYPE_LIST, $*); }
    ;

type_list1:
      type
                    { $$ = $^(TYPE_LIST, $*); }
    ;

// Assignment

target :
      simple_target
    | typed_id
    ;

right_side :
      tuple_ext_expr
    | assign
    ;



/* EXPRESSIONS */
plist :
      expression (','! expression)* ','!
                      { $$ = $^(EXPR_LIST, $*); }
    ;

expression_list0 :
      expression_list
    | /* empty */     { $$ = $^(EXPR_LIST); }
    ;

expression_list :
      expression (','! expression)*
                      { $$ = $^(EXPR_LIST, $*); }
    ;

tuple_ext_expr:
      expression
    | expression ','! (expression ','!)* expression
                      { $$ = $^(TUPLE, $*); }
    ;

expression0 :
      expression
    | /* empty */     { $$ = $^(EMPTY); }
    ;

expression :
      root_expr
    ;

root_expr :
      if_expr
    | boolean_expr
    ;

if_expr :
      E0=boolean_expr "if"! T=root_expr "else"! E1=root_expr
                    { $$ = $^(IF_EXPR, $T, $E0, $E1); }
    ;

boolean_expr :
      arith_expr
    | compare_expr
    | boolean_expr (type="and"!|type="or"!) boolean_expr %expand
                    { int token_id = $type.value()->as_string().compare("and") == 0 ? AND : OR;
                      $$ = $^(token_id, $*);
                    }
    ;

compare_expr :
      lcompare_expr ('<'|'>'|"<="|">="|"=="|"!="|"in"|"notin"|"is"|"isnot") arith_expr %expand
                    { $$ = make_expr(COMPARE, $*); }
    ;

lcompare_expr :
      arith_expr
    | lcompare_expr ('<'|'>'|"<="|">="|"=="|"!="|"in"|"notin"|"is"|"isnot") arith_expr %expand
                    { $$ = make_expr(LCOMPARE, $*); }
    ;

arith_expr :
      unary_expr
    | arith_expr ('+'|'-'|'*'|'/'|'%') arith_expr %expand
                      { $$ = make_binop($*); }
    ;

unary_expr :
      expo_expr
    | ('+'|'-'|"not") unary_expr %expand
                      { $$ = make_unop($*); }
    ;

expo_expr :
      primary_expr
    | expo_expr EXPO expo_expr
                      { $$ = make_binop($*); }
    ;

primary_expr :
      INT_LITERAL
    | simple_target
    | str_expr
    | dict
    | '(' ')'
                      { $$ = $^(TUPLE); }
    | '[' ']'
                      { $$ = $^(LIST); }
    | '('! expression ','!  (expression ','!)* expression? ')'!
                      { $$ = $^(TUPLE, $*); }
    | '['! expression  (','! expression)* ','!? ']'!
                      { $$ = $^(LIST, $*); }
    | '('! root_expr ')'!
    ;

simple_target :
      ID
    | primary_expr '.'! ID
                    { $$ = $^(ATTR_REF, $*); }
    | primary_expr '['! tuple_ext_expr ']'!
                    { $$ = $^(SUBSCRIPTION, $*); }
    | primary_expr '['! expression0 ':'! expression0 ']'!
                    { $$ = $^(SLICING, $*); }
    ;

pair :
      P1=expression ':'! P2=expression
                      { $$ = $^(PAIR,$P1,$P2); }
    ;

dict :
      '{'! ((pair '\n'! ','!) | (pair ','! '\n'!?))* pair? '}'!
                      { $$ = $^(DICT, $*); }
    ;

str_expr :
      STRING
    | RAWSTRING
    | str_expr (S=RAWSTRING|S=STRING) %expand
                      { string s = ((AST_Token *) $S.value().data())->string_text();
                        ((AST_Token *) $str_expr.value().data())->append_text(s);
                        $$ = $str_expr.value();
                      }
    ;

/* Normally, throw away whitespace other than newline. */
* : (' ' | '\t' | '\r')+ ;

'(' :                 { bracket_count++; }
    ;

')' :                 { bracket_count--; }
    ;

'{' :                 { bracket_count++; }
    ;

'}' :                 { bracket_count--; }
    ;

'[' :                 { bracket_count++; }
    ;

']' :                 { bracket_count--; }
    ;

UNUSED_KEYWORD : ("as" | "assert" | "del" | "except" | "exec" | "finally" | "future" |
                  "global" | "import" | "lambda" | "raise" | "try" | "with" | "yield" |
                  "from")
                      { error($TEXT, "syntax error: invalid syntax"); }
    ;

INDENTATION : _BOL ( ' ' | '\t' )* %prefer
                      { int spaces = count_leading_whitespaces($TEXT, $TEXT_SIZE);
                        if ( indent_stack.empty() ) {
                          if ( spaces > 0 )
                            error($TEXT, "indentation error: unexpected indent");
                          indent_stack.push(0);
                          YYIGNORE;
                        } else {
                          //if (bracket_count > 0)
                          //  cout << "Bracket count: " + bracket_count << endl;
                          if ( bracket_count > 0 || indent_stack.top() == spaces )
                            YYIGNORE;
                          else if ( indent_stack.top() < spaces ) {
                            indent_stack.push(spaces);
                            YYSET_TOKEN(INDENT);
                          }
                          else {
                            int dedent_count = 0;
                            while ( indent_stack.top() > spaces ) {
                              indent_stack.pop();
                              dedent_count++;
                            }
                            if ( indent_stack.top() != spaces )
                              error($TEXT, "indentation error: unindent does not match outer indentation level");
                            for (int i = 0; i < dedent_count-1; i++) {
                              yyqueue_token(DEDENT, 0, 0, "", 0);
                              //YYSET_TOKEN(DEDENT);
                            }
                            YYSET_TOKEN(DEDENT);
                          }
                        }
                      }
    ;

_DIGIT : '0' .. '9' ;

_LETTER : 'A' .. 'Z' | 'a' .. 'z' ;

ID : (_LETTER | '_') (_LETTER | _DIGIT | '_')* ;

TYPE_VAR : '$' (_LETTER | '_') (_LETTER | _DIGIT | '_')*;

INT_LITERAL : ('1' .. '9') ('0' .. '9')* | '0' ;

STRING :
      '\"' ((_ANY - ('\"' | '\n'))* "\\\"")* (_ANY - ('\"' | '\n'))* '\"'
                      { $$ = AST::make_token (STRING, $TEXT_SIZE - 2,
                                              $TEXT+1, false);
                      }
    | "\"\"\"" ((_ANY - '\"')+ ('\"' '\"'?)?)* "\"\"\""
                      { $$ = AST::make_token (STRING, $TEXT_SIZE - 6,
                                              $TEXT+3, false);
                      }
    ;

RAWSTRING :
      "r\"" ((_ANY - ('\"' | '\n'))* "\\\"")* (_ANY - ('\"' | '\n'))* '\"'
                      { $$ = AST::make_token (RAWSTRING, $TEXT_SIZE - 3,
                                              $TEXT+2, false);
                      }
    | "r\"\"\"" ((_ANY - '\"')+ ('\"' '\"'?)?)* "\"\"\""
                      { $$ = AST::make_token (RAWSTRING, $TEXT_SIZE - 7,
                                              $TEXT+4, false);
                      }
    ;

%%

bool debugParser;

static AST_Ptr
make_unop (const List_Ptr& operands)
{
    return YYMAKE_TREE (UNOP, make_id (operands->at (0)), operands->at (1));
}

static AST_Ptr
make_binop (const List_Ptr& operands)
{
    return YYMAKE_TREE (BINOP, operands->at (0), make_id (operands->at (1)),
                        operands->at (2));
}

static AST_Ptr
make_id (AST_Ptr& token)
{
    AST_Ptr result = AST::make_token (ID, token->text_size (),
                                      token->as_chars (), false);
    result->set_loc (token->loc ());
    return result;
}

static AST_Ptr
make_expr (const int KEY, const List_Ptr& operands)
{
    return YYMAKE_TREE (KEY, operands->at (0), make_id (operands->at (1)),
                        operands->at (2));
}


int
AST::lineNumber ()
{
    return yylocation_line (loc ());
}

void
parse (FILE* f, const string& name)
{
    if (debugParser)
        yydebug = 1;
    yypush_lexer (f, name);
    theTree = NULL;
    yyparse ();
    if (theTree != NULL) {
        theTree->print (cout, 0);
    }
}

static int
count_leading_whitespaces (const char* text, const int text_size)
{
  int spaces = 0;
  for (int i = 0; i < text_size; i++) {
    if (text[i] == ' ')
      spaces++;
    else // replacing tab with the appropriate number of spaces.
      spaces += 8 - (spaces % 8);
  }
  return spaces;
}
