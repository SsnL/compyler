#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Add local bin
export PATH=$DIR/root/bin/:$PATH

# Path to servers
SERVER=torus.cs.berkeley.edu
PROJ_PATH=$1

function send_usage {
  echo "Usage: send -f FILE -i ID"
}

function send {
  OPTIND=1
  ID=
  FILE=
  while getopts "f:i:h" O; do
    case $O in
      f)
        FILE=$OPTARG
        ;;
      i)
        ID=$OPTARG
        ;;
      h)
        send_usage; return
        ;;
      ?)
        send_usage; return 1
        ;;
    esac
  done

  if [ -z $FILE ] || [ -z $ID ]; then
    send_usage; return 1
  fi

  if [ -z $PROJ_PATH ]; then
    echo Error: No PROJ_PATH set.; return 1
  fi

  ADDRESS=cs164-$ID@$SERVER
  scp -r $FILE $ADDRESS:$PROJ_PATH
}

function connect {
  if [ -z $1 ]; then
    echo "Usage: connect ID"; return 1
  fi
  ssh cs164-$1@$SERVER
}

function test_usage {
  echo "Usage: test [-vs] [-d TESTDIR] [-o FILE] [-p PHASE] -t TEST"
  echo "  -v          : Verbose output                        [Default: true]"
  echo "  -s          : Saves output.                         [Default: false]"
  echo "  -d TESTDIR  : Looks in TESTDIR for the TEST.        [Default: tests/correct2]"
  echo "  -o FILE     : Saves output in FILE.ast and FILE.    [Default: out (Overrides SAVE)]"
  echo "  -p PHASE    : Which phase to use for apyc.          [Default: 2]"
}

function test {
  OPTIND=1
  FILE=out
  VERBOSE=false
  SPEC=false
  TEST=
  SAVE=false
  PHASE=2
  TESTDIR=tests/correct2

  while getopts "sd:p:o:t:vh" O; do
    case $O in
      s)
        SAVE=true
        ;;
      d)
        TESTDIR=$OPTARG
        ;;
      p)
        PHASE=$OPTARG
        ;;
      o)
        SPEC=true
        FILE=$OPTARG
        ;;
      t)
        TEST="$OPTARG.py"
        ;;
      v)
        VERBOSE=true
        ;;
      h)
        test_usage; return
        ;;
      ?)
        test_usage; return 1
        ;;
    esac
  done

  if [ -z $TEST ]; then
    test_usage; return 1
  fi

  if $VERBOSE; then
    echo ">> Original file..."
    cat $TESTDIR/$TEST
  fi
  echo ">> Running apyc..."
  ./apyc --phase=$PHASE -o $FILE.ast $TESTDIR/$TEST
  echo ">> Decorated AST..."
  tail -n +0 $FILE.ast
  echo ">> Unparsing AST..."
  pyunparse -o $FILE $FILE.ast
  cat $FILE

  if $SPEC || $SAVE; then
    printf ">> Saved AST in %s. Saved pyunparsed program in %s.\n" "$FILE.ast" "$FILE"
  else
    rm out out.ast
  fi
}

function test-clean {
  rm -f out out.ast
  echo ">> Removed 'out' and 'out.ast'"
}
