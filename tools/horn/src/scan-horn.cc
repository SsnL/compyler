#line 2 "scan-horn.cc"

#line 4 "scan-horn.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gram__create_buffer
#define yy_delete_buffer gram__delete_buffer
#define yy_flex_debug gram__flex_debug
#define yy_init_buffer gram__init_buffer
#define yy_flush_buffer gram__flush_buffer
#define yy_load_buffer_state gram__load_buffer_state
#define yy_switch_to_buffer gram__switch_to_buffer
#define yyin gram_in
#define yyleng gram_leng
#define yylex gram_lex
#define yylineno gram_lineno
#define yyout gram_out
#define yyrestart gram_restart
#define yytext gram_text
#define yywrap gram_wrap
#define yyalloc gram_alloc
#define yyrealloc gram_realloc
#define yyfree gram_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gram_restart(gram_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int gram_leng;

extern FILE *gram_in, *gram_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gram_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gram_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gram_restart()), so that the user can continue scanning by
	 * just pointing gram_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when gram_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int gram_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow gram_wrap()'s to do buffer switches
 * instead of setting up a fresh gram_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void gram_restart (FILE *input_file  );
void gram__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE gram__create_buffer (FILE *file,int size  );
void gram__delete_buffer (YY_BUFFER_STATE b  );
void gram__flush_buffer (YY_BUFFER_STATE b  );
void gram_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void gram_pop_buffer_state (void );

static void gram_ensure_buffer_stack (void );
static void gram__load_buffer_state (void );
static void gram__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER gram__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE gram__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE gram__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE gram__scan_bytes (yyconst char *bytes,int len  );

void *gram_alloc (yy_size_t  );
void *gram_realloc (void *,yy_size_t  );
void gram_free (void *  );

#define yy_new_buffer gram__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gram_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gram__create_buffer(gram_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gram_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gram__create_buffer(gram_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define gram_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *gram_in = (FILE *) 0, *gram_out = (FILE *) 0;

typedef int yy_state_type;

extern int gram_lineno;

int gram_lineno = 1;

extern char *gram_text;
#define yytext_ptr gram_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gram_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	(yytext_ptr) -= (yy_more_len); \
	gram_leng = (size_t) (yy_cp - (yytext_ptr)); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 110
#define YY_END_OF_BUFFER 111
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[592] =
    {   0,
        2,    2,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   79,   79,
       93,   93,   93,   93,  111,   75,    2,    2,   55,   66,
       75,   65,   55,    1,   61,   75,   62,   62,   73,   59,
       75,   58,   60,   68,   75,  108,   80,   80,  108,   76,
       81,   81,   83,   84,   82,   76,  109,   99,  108,   98,
      108,  108,  108,  102,  105,  106,  108,   78,  108,   97,
       96,  108,   95,   94,    2,    0,    0,   74,    0,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   67,   56,   57,

       61,    0,    2,   62,   64,   64,    0,    0,   71,   59,
       59,    0,    2,   58,   58,   58,   58,   58,   60,   60,
        0,   91,   90,   87,   91,   85,   89,   91,   86,   83,
      107,  100,  101,    0,  103,    0,  102,  104,    0,   77,
        0,    0,   79,   93,   93,   93,   93,    0,   69,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,    0,
        0,    2,    2,    2,    2,   64,   63,   72,   70,   58,
       58,   58,    0,   87,    0,    0,   88,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,    0,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,    2,    2,    2,
        2,   50,   51,   53,   52,    0,   87,    0,    0,    4,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
        0,   54,   54,   54,   20,    0,   54,   54,   54,    0,
        0,   54,   54,   54,   54,   54,   54,   54,   54,   33,
       54,   54,   54,   54,   54,   54,   54,   41,   54,   44,

       54,   54,   47,    2,    2,    2,    2,    2,    2,    0,
        0,    0,    5,   54,   54,   54,   10,   54,   54,   54,
        0,   54,    0,   54,   54,   54,    0,   54,   23,    0,
       54,    0,    0,   54,   54,   54,   54,   29,   54,   31,
       54,   54,   54,   54,    0,   54,   54,   38,   54,   40,
       42,   45,   54,    0,    0,    2,    2,    2,    2,    2,
        0,    0,   92,   54,    7,   54,    0,   54,   48,   12,
        0,    0,   54,    0,   54,   54,   54,    0,   54,    0,
       54,    0,    0,   54,   54,   54,   54,   30,    0,   54,
       49,   54,    0,   54,   54,   54,    0,   54,   54,    0,

        2,    0,    2,    2,    2,    2,    2,    2,    0,   54,
        8,   54,    0,   54,    0,   54,    0,    0,   54,    0,
       54,   54,   54,    0,   54,    0,   54,    0,    0,   54,
       54,   54,   54,    0,   54,   35,    0,   54,   37,   54,
        0,   54,   46,    0,    0,    0,   54,   54,    0,   54,
        0,   54,    0,    0,   54,    0,    0,   54,   19,    0,
       54,    0,   54,    0,   26,   54,   26,   27,   54,    0,
       54,    0,   54,   39,    0,   54,    0,    0,   54,   54,
        0,   54,   13,   13,    0,    0,   54,    0,    0,   54,
       21,   22,    0,   54,    0,   54,   54,    0,   54,    0,

       54,    0,   54,    0,    0,    0,   54,    9,    0,   54,
        0,    0,   54,   17,    0,   54,    0,   54,    0,   54,
       54,    0,   34,    0,   54,    0,   54,    3,    0,   54,
        0,   54,   14,    0,   54,    0,   18,   24,   24,    0,
       54,   54,   32,   36,   36,   43,   43,    6,    6,    0,
       54,    0,   54,    0,    0,   54,   54,   11,   11,    0,
       54,    0,    0,   54,   54,    0,   54,   16,    0,   54,
       54,    0,   54,   25,   25,   54,    0,   54,   54,    0,
       54,    0,   15,   15,    0,    0,    0,    0,    0,   28,
        0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    1,    9,    5,
        5,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   18,   18,    5,    5,   19,
       20,   21,   22,    1,   23,   24,   25,   25,   26,   27,
       28,   28,   28,   28,   28,   29,   28,   30,   31,   28,
       28,   28,   28,   28,   32,   28,   28,   33,   34,   28,
       35,   36,   35,    5,   37,    1,   38,   39,   40,   41,

       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   58,   59,   47,   60,
       61,   47,   62,    5,   63,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[65] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    4,    4,    4,    5,    1,
        6,    1,    7,    7,    7,    7,    7,    8,    8,    8,
        8,    8,    8,    8,    9,    1,    8,    7,    7,    7,
        7,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    1,    1,   10
    } ;

static yyconst flex_int16_t yy_base[623] =
    {   0,
        0, 1156,   62,   63,   64,   67,   53,   56,   75,   79,
       99,  126,   86,  106,  134,  148,   76,   94,   77,   88,
      116,  130,  135,  155, 1162, 1164,  144,  166, 1164, 1164,
      204, 1164, 1141, 1164, 1146,   96,  157,  160,  129,  168,
      190,  190,  204, 1164, 1110, 1164, 1164, 1164,  261, 1164,
     1164, 1164,    0, 1164, 1164,    0, 1164, 1164, 1095, 1164,
      188,   89,  164, 1164, 1164, 1164,  204, 1164,  269, 1164,
     1164,  272, 1164, 1164,  277,  145,  282, 1164,  285,    0,
     1105,  248,  236, 1110, 1106, 1103,  157, 1111,  257, 1094,
      267,  159,  250,  275, 1100, 1108, 1111, 1164, 1164,    0,

        0, 1138,  326,  315,    0,  347, 1126, 1125, 1164,    0,
      321,  340,  346,    0,  337,  361,  342,  377,    0,  382,
     1099, 1164, 1164,  252,    0, 1164, 1164,    0,    0,    0,
     1164, 1164, 1164,  399, 1164,  402, 1164, 1164,  407, 1164,
      410,  413, 1108, 1164,  416, 1107,  419,  422, 1164,    0,
     1101,  267, 1086, 1085, 1086,  266, 1083,  288, 1086,  297,
     1096, 1080, 1084,  394, 1091, 1075, 1076,  334, 1075, 1075,
     1084, 1085, 1088, 1070, 1076, 1070, 1076, 1066, 1080, 1109,
      417,  426,  431,  434,  449,    0,    0, 1164, 1164,  440,
      459,  464, 1067,  286,    0,    0,    0,  457,  432,  492,

      345,  495,  447,  498,  433,  501,  504,  507,  510,  436,
     1075, 1058,  141, 1058, 1072, 1061,  448, 1070, 1069, 1097,
     1052, 1066, 1063, 1049, 1092, 1066, 1059, 1060,  174,  422,
       55, 1046, 1047,  477,  400, 1048, 1056, 1039, 1051, 1046,
     1039, 1043, 1050, 1049, 1038, 1050, 1048,  514,  517,  532,
      536,  527,  538,  543,  548, 1045, 1164,    0,    0,    0,
     1042, 1027, 1033, 1028, 1042, 1026, 1029, 1039, 1065, 1036,
     1023, 1029, 1019, 1015,    0, 1019, 1014, 1028,  452, 1027,
     1022, 1025, 1020, 1009, 1022, 1013, 1004, 1011, 1018, 1017,
     1016, 1000,  509, 1010,  998, 1012,  996,    0, 1001,    0,

     1000,  998,    0,  567,  571,  581,  585,  595,  609, 1045,
        0,    0,    0,  999, 1005,  988,    0,  512, 1004,  987,
      990,  565, 1004, 1003, 1002, 1001, 1000,  991,    0,  983,
      982,  991,  982,  989,  980,  974,  972,    0,  971,    0,
     1014,  985,  970,  982,  970,  969,  966,    0,  963,    0,
      567,    0,  963,  477,  612,  623,  626,  640,  650,  654,
      576,    0, 1164,  961,  961,  976,  956,  955,    0,  595,
      958,  960,  959,  955,  960,  968,  963,  951,  953,  949,
      948,  964,  959,  962,  957,  946,  955,    0,  943,  953,
        0,  939,  955,  954,  949,  938,  932,  931,  945,  513,

      664,  668,  678,  681,  695,  705,  709,  719,  630,  624,
        0,  929,  943,  942,  928,  927,  939,  922,  921,  922,
      964,  919,  933,  936,  922,  930,  929,  912,  913,  910,
      911,  926,  910,  918,  882,    0,  877,  874,    0,  877,
      887,  886,    0,  911,  914,  854,  853,  851,  847,  844,
      843,  840,  851,  834,  833,  844,  847,  835,    0,  830,
      820,  832,  828,  821, 1164,  797,    0,    0,  795,  787,
      789,  772,  755,    0,  771,  766,  798,  744,  743,  736,
      745,  744, 1164,    0,  733,  725,  724,  699,  713,  693,
     1164,    0,  705,  704,  692,  691,  701,  708,  702,  701,

      700,  691,  690,  732,  573,  695,  694,    0,  683,  681,
      672,  672,  670, 1164,  670,  684,  665,  658,  626,  636,
      665,  656,    0,  649,  648,  660,  653, 1164,  654,  652,
      633,  631, 1164,  583,  578,  577,    0, 1164,    0,  567,
      565,  563, 1164, 1164,    0, 1164,    0, 1164,    0,  564,
      559,  638,  664,  538,  512,  508,  502, 1164,    0,  505,
      499,  486,  489,  488,  469,  433,  404, 1164,  357,  344,
      337,  320,  319, 1164,    0,  312,  304,  282,  298,  226,
      183,  172, 1164,    0,  127,   75,   67,   74,   16, 1164,
     1164,  755,  765,  773,  778,  786,  793,  799,  805,  813,

      823,  833,  840,  848,  858,  865,  870,  875,  880,  885,
      889,  893,  897,  901,  908,  915,  919,  923,  927,  934,
      944,  954
    } ;

static yyconst flex_int16_t yy_def[623] =
    {   0,
      591,    1,  592,  592,  592,  592,  593,  593,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  594,  591,  595,  595,  596,  597,
      591,  598,  599,  591,  591,  591,  591,  591,  600,  591,
      591,  591,  601,  591,  591,  601,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  602,  591,  591,  591,  591,  591,  591,  591,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  591,  591,  594,

      594,  604,  605,  595,  606,  606,  596,  596,  591,  607,
      597,  591,  591,  608,  598,  598,  598,  598,  609,  599,
      591,  591,  591,  591,  610,  591,  591,  611,  612,  601,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  604,
      604,  605,  605,  605,  605,  606,  106,  591,  591,  598,
      598,  598,  591,  591,  613,  614,  612,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  602,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  591,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  615,  605,  605,
      591,  598,  598,  598,  598,  591,  591,  616,  617,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      591,  603,  603,  603,  603,  591,  603,  603,  603,  591,
      591,  603,  603,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  603,  603,  603,  603,  603,  603,

      603,  603,  603,  615,  615,  604,  615,  615,  615,  591,
      618,  619,  603,  603,  603,  603,  603,  603,  603,  603,
      591,  603,  591,  603,  603,  603,  591,  603,  603,  591,
      603,  591,  591,  603,  603,  603,  603,  603,  603,  603,
      603,  603,  603,  603,  591,  603,  603,  603,  603,  603,
      603,  603,  603,  604,  604,  605,  620,  615,  615,  604,
      591,  611,  591,  603,  603,  603,  591,  603,  603,  603,
      591,  591,  603,  591,  603,  603,  603,  591,  603,  591,
      603,  591,  591,  603,  603,  603,  603,  603,  591,  603,
      603,  603,  591,  603,  603,  603,  591,  603,  603,  621,

      615,  604,  604,  615,  615,  604,  615,  615,  591,  603,
      603,  603,  591,  603,  591,  603,  591,  591,  603,  591,
      603,  603,  603,  591,  603,  591,  603,  591,  591,  603,
      603,  603,  603,  591,  603,  603,  591,  603,  603,  603,
      591,  603,  603,  604,  591,  591,  603,  603,  591,  603,
      591,  603,  591,  591,  603,  591,  591,  603,  603,  591,
      603,  591,  603,  591,  591,  603,  603,  603,  603,  591,
      603,  591,  603,  603,  591,  603,  622,  591,  603,  603,
      591,  603,  591,  603,  591,  591,  603,  591,  591,  603,
      591,  603,  591,  603,  591,  603,  603,  591,  603,  591,

      603,  591,  603,  622,  622,  591,  603,  603,  591,  603,
      591,  591,  603,  591,  591,  603,  591,  603,  591,  603,
      603,  591,  603,  591,  603,  591,  603,  591,  591,  603,
      591,  603,  591,  591,  603,  591,  603,  591,  603,  591,
      603,  603,  591,  591,  603,  591,  603,  591,  603,  591,
      603,  591,  603,  591,  591,  603,  603,  591,  603,  591,
      603,  591,  591,  603,  603,  591,  603,  591,  591,  603,
      603,  591,  603,  591,  603,  603,  591,  603,  603,  591,
      603,  591,  591,  603,  591,  591,  591,  591,  591,  591,
        0,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591
    } ;

static yyconst flex_int16_t yy_nxt[1229] =
    {   0,
       26,   27,   28,   27,   29,   30,   26,   31,   32,   29,
       33,   34,   29,   35,   36,   37,   38,   38,   39,   29,
       26,   29,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   40,   40,   26,   41,   42,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
       43,   44,   26,   26,   47,   47,   51,   48,   48,   51,
      590,   54,   52,   55,   54,   52,   55,   57,   57,   68,
       58,   57,   59,   60,   58,   67,   59,   60,   57,   61,
       68,   58,  284,   61,   60,  285,   57,   49,   49,   49,

       61,   57,   49,   67,   58,  102,   62,   60,   57,  135,
      103,   58,   69,   61,   60,  589,   56,   63,   70,   56,
       61,   71,  588,   69,  136,   50,   50,   50,   57,  587,
       50,   58,   70,   62,   60,   71,   57,   73,  108,   58,
       61,   62,   60,   74,   63,   75,   75,   75,   61,  109,
       57,   72,   63,   58,  102,   62,   60,   73,   76,  103,
       64,   65,   61,   74,  586,   72,   63,   75,   75,   75,
       72,  137,  104,  104,  104,  104,  104,  104,  262,   77,
       76,  101,  138,  110,  110,  110,  263,   64,   65,  106,
       72,  112,  113,  112,  159,   64,   66,  132,  160,  139,

      170,   77,  133,  101,  171,  114,  114,  114,  161,   64,
       66,   78,  115,  116,  280,  118,  106,  101,  140,  119,
      119,  119,  281,  134,  585,   79,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,  584,  141,
       80,   80,   80,   81,   82,   83,   84,   85,   80,   86,
       80,   80,   87,   88,   89,   90,   91,   80,   92,   93,
       94,   95,   96,   80,   97,   98,  123,  194,  194,  123,
      142,  143,  142,  145,  146,  145,  124,  124,   75,   75,
       75,  583,  123,  112,  113,  112,  148,  148,  148,  152,
      154,   76,  125,  126,  163,  155,  123,  172,  127,  127,

      153,  257,  257,  127,  167,  212,  173,  147,  164,  213,
      582,  127,   77,  165,  218,  127,  174,  127,  128,  127,
      129,  168,  214,  581,  169,  219,  175,  183,   75,  183,
      104,  104,  104,  221,  101,  176,  110,  110,  110,  224,
      184,  112,  113,  112,  222,  580,  149,   75,   75,   75,
      101,  579,  114,  114,  114,  101,  225,  114,  114,  114,
       76,  185,  187,  187,  187,  135,  190,  578,  577,  187,
      187,  187,  187,  187,  101,  235,  114,  114,  114,  236,
      136,   77,  576,  575,  187,  187,  187,  187,  187,  187,
      101,  191,  114,  114,  114,  101,  574,  119,  119,  119,

      198,  199,  198,  200,  201,  200,  229,  192,  202,  203,
      202,  204,  205,  204,  142,  143,  142,  207,  146,  207,
      209,  210,  209,  148,  148,  148,  181,  183,   75,  183,
      230,   75,  183,   75,  183,  183,   75,  183,  591,  290,
      184,  132,  291,  248,  231,  184,  133,  140,  249,  573,
      250,  251,  250,  101,  137,  114,  114,  114,  198,  199,
      198,  185,  282,  184,  330,  138,  185,  134,  141,  185,
      283,  147,  101,  252,  114,  114,  114,  101,  572,  114,
      114,  114,  139,  149,  185,  267,  400,  253,  331,  268,
      254,  401,  255,  200,  201,  200,  202,  203,  202,  204,

      205,  204,  142,  143,  142,  207,  146,  207,  207,  146,
      207,  209,  210,  209,  288,  305,  306,  305,  183,   75,
      183,  345,  181,  307,  367,  571,  248,  306,  308,  570,
      569,  249,  289,  250,  251,  250,  568,   75,   75,   75,
      101,  567,  114,  114,  114,  346,  184,  566,  368,  309,
       76,  101,  185,  114,  114,  114,  101,  565,  114,  114,
      114,  101,  564,  114,  114,  114,  563,  185,  305,  306,
      305,   77,  305,  306,  305,  528,  307,  372,  505,  397,
      307,  308,  306,  306,  306,  308,  305,  306,  305,  562,
      181,  409,  409,  409,  307,  354,  305,  306,  305,  356,

      559,  373,  309,  398,  357,  558,  309,  415,  557,  358,
      359,  360,  359,  402,  403,  402,  355,  556,  307,  555,
      309,  181,  554,  308,  183,   75,  183,  405,  406,  405,
      309,  416,  248,  445,  553,  307,  446,  249,  540,  552,
      407,  305,  306,  305,  309,  409,  409,  409,  540,  357,
      560,  359,  360,  359,  358,  306,  306,  306,  185,  307,
      447,  408,  540,  181,  308,  305,  306,  305,  354,  402,
      403,  402,  541,  307,  560,  309,  560,  181,  308,  306,
      306,  306,  305,  306,  305,  309,  551,  181,  550,  355,
      307,  549,  354,  548,  547,  308,  305,  306,  305,  309,

      561,  546,  545,  544,  307,  543,  306,  306,  306,  308,
      305,  306,  305,  355,  181,  542,  309,  539,  357,  354,
      359,  360,  359,  358,  538,  537,  536,  535,  307,  534,
      309,  533,  532,  308,  531,  530,  529,  505,  527,  526,
      355,  525,  524,  523,  309,  522,  521,  520,  519,  518,
      517,  516,  515,  514,  309,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   53,   53,   53,   53,   53,
       53,   53,   53,   53,   53,  101,  513,  512,  511,  101,
      101,  105,  510,  509,  105,  105,  107,  107,  107,  107,
      508,  107,  107,  107,  107,  111,  111,  507,  506,  111,

      111,  117,  117,  505,  503,  117,  117,  120,  120,  502,
      501,  120,  120,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  130,  130,  130,  130,  500,  499,  130,
      130,  130,  130,  144,  144,  144,  144,  144,  144,  144,
      144,  498,  144,  150,  497,  496,  150,  150,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  186,  495,
      494,  186,  186,  110,  493,  492,  110,  110,  114,  491,
      490,  114,  114,  119,  489,  488,  119,  119,  195,  487,
      486,  195,  196,  485,  484,  196,  197,  483,  482,  197,

      258,  481,  480,  258,  259,  479,  478,  259,  304,  304,
      304,  304,  304,  304,  304,  304,  304,  304,  311,  477,
      181,  311,  312,  476,  475,  312,  362,  474,  473,  362,
      363,  472,  471,  363,  404,  404,  404,  404,  404,  404,
      404,  404,  404,  404,  444,  444,  444,  444,  444,  444,
      444,  444,  444,  444,  504,  470,  504,  504,  504,  504,
      504,  504,  504,  504,  469,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  459,  458,  457,  456,  455,  454,
      453,  452,  451,  450,  449,  448,  443,  442,  441,  440,
      439,  438,  437,  436,  435,  434,  433,  432,  431,  430,

      429,  428,  427,  426,  425,  424,  423,  422,  421,  420,
      419,  418,  417,  414,  413,  412,  411,  410,  399,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  371,  370,  369,  366,  365,  364,  361,  353,
      352,  351,  350,  349,  348,  347,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  329,
      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  310,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  287,

      286,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  266,  265,  264,  261,  260,  256,  181,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      234,  233,  232,  228,  227,  226,  223,  220,  217,  216,
      215,  211,  208,  206,  193,  189,  188,  181,  179,  178,
      177,  166,  162,  158,  157,  156,  151,  131,  121,  100,
       99,  591,   45,   25,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591
    } ;

static yyconst flex_int16_t yy_chk[1229] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    4,    5,    3,    4,    6,
      589,    7,    5,    7,    8,    6,    8,    9,   17,   19,
        9,   10,    9,    9,   10,   17,   10,   10,   13,    9,
       20,   13,  231,   10,   13,  231,   18,    3,    4,    5,

       13,   11,    6,   18,   11,   36,   11,   11,   14,   62,
       36,   14,   19,   11,   14,  588,    7,   11,   21,    8,
       14,   21,  587,   20,   62,    3,    4,    5,   12,  586,
        6,   12,   22,   12,   12,   22,   15,   23,   39,   15,
       12,   15,   15,   23,   12,   27,   27,   27,   15,   39,
       16,   21,   15,   16,   76,   16,   16,   24,   27,   76,
       11,   11,   16,   24,  585,   22,   16,   28,   28,   28,
       23,   63,   37,   37,   37,   38,   38,   38,  213,   27,
       28,   40,   63,   40,   40,   40,  213,   12,   12,   37,
       24,   41,   41,   41,   87,   15,   15,   61,   87,   63,

       92,   28,   61,   42,   92,   42,   42,   42,   87,   16,
       16,   31,   42,   42,  229,   42,   37,   43,   67,   43,
       43,   43,  229,   61,  582,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,  581,   67,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   49,  124,  124,   49,
       69,   69,   69,   72,   72,   72,   49,   49,   75,   75,
       75,  580,   49,   77,   77,   77,   79,   79,   79,   82,
       83,   75,   49,   49,   89,   83,   49,   93,   49,   49,

       82,  194,  194,   49,   91,  152,   93,   72,   89,  152,
      579,   49,   75,   89,  156,   49,   94,   49,   49,   49,
       49,   91,  152,  578,   91,  156,   94,  103,  103,  103,
      104,  104,  104,  158,  111,   94,  111,  111,  111,  160,
      103,  112,  112,  112,  158,  577,   79,  113,  113,  113,
      115,  576,  115,  115,  115,  117,  160,  117,  117,  117,
      113,  103,  106,  106,  106,  201,  115,  573,  572,  106,
      106,  106,  106,  106,  116,  168,  116,  116,  116,  168,
      201,  113,  571,  570,  106,  106,  106,  106,  106,  106,
      118,  116,  118,  118,  118,  120,  569,  120,  120,  120,

      134,  134,  134,  136,  136,  136,  164,  118,  139,  139,
      139,  141,  141,  141,  142,  142,  142,  145,  145,  145,
      147,  147,  147,  148,  148,  148,  181,  182,  182,  182,
      164,  181,  183,  183,  183,  184,  184,  184,  210,  235,
      182,  199,  235,  184,  164,  183,  199,  205,  184,  567,
      185,  185,  185,  190,  203,  190,  190,  190,  198,  198,
      198,  182,  230,  185,  279,  203,  183,  199,  205,  184,
      230,  210,  191,  190,  191,  191,  191,  192,  566,  192,
      192,  192,  203,  148,  185,  217,  354,  191,  279,  217,
      192,  354,  192,  200,  200,  200,  202,  202,  202,  204,

      204,  204,  206,  206,  206,  207,  207,  207,  208,  208,
      208,  209,  209,  209,  234,  248,  248,  248,  249,  249,
      249,  293,  400,  248,  318,  565,  249,  400,  248,  564,
      563,  249,  234,  250,  250,  250,  562,  251,  251,  251,
      252,  561,  252,  252,  252,  293,  250,  560,  318,  248,
      251,  253,  249,  253,  253,  253,  254,  557,  254,  254,
      254,  255,  556,  255,  255,  255,  555,  250,  304,  304,
      304,  251,  305,  305,  305,  505,  304,  322,  505,  351,
      305,  304,  306,  306,  306,  305,  307,  307,  307,  554,
      306,  361,  361,  361,  307,  306,  308,  308,  308,  307,

      551,  322,  304,  351,  308,  550,  305,  370,  542,  308,
      309,  309,  309,  355,  355,  355,  306,  541,  309,  540,
      307,  355,  536,  309,  356,  356,  356,  357,  357,  357,
      308,  370,  356,  409,  535,  357,  410,  356,  519,  534,
      357,  358,  358,  358,  309,  409,  409,  409,  520,  358,
      552,  359,  359,  359,  358,  360,  360,  360,  356,  359,
      410,  357,  519,  360,  359,  401,  401,  401,  360,  402,
      402,  402,  520,  401,  552,  358,  553,  402,  401,  403,
      403,  403,  404,  404,  404,  359,  532,  403,  531,  360,
      404,  530,  403,  529,  527,  404,  405,  405,  405,  401,

      553,  526,  525,  524,  405,  522,  406,  406,  406,  405,
      407,  407,  407,  403,  406,  521,  404,  518,  407,  406,
      408,  408,  408,  407,  517,  516,  515,  513,  408,  512,
      405,  511,  510,  408,  509,  507,  506,  504,  503,  502,
      406,  501,  500,  499,  407,  498,  497,  496,  495,  494,
      493,  490,  489,  488,  408,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  593,  593,  593,  593,  593,
      593,  593,  593,  593,  593,  594,  487,  486,  485,  594,
      594,  595,  482,  481,  595,  595,  596,  596,  596,  596,
      480,  596,  596,  596,  596,  597,  597,  479,  478,  597,

      597,  598,  598,  477,  476,  598,  598,  599,  599,  475,
      473,  599,  599,  600,  600,  600,  600,  600,  600,  600,
      600,  600,  600,  601,  601,  601,  601,  472,  471,  601,
      601,  601,  601,  602,  602,  602,  602,  602,  602,  602,
      602,  470,  602,  603,  469,  466,  603,  603,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  605,  605,
      605,  605,  605,  605,  605,  605,  605,  605,  606,  464,
      463,  606,  606,  607,  462,  461,  607,  607,  608,  460,
      458,  608,  608,  609,  457,  456,  609,  609,  610,  455,
      454,  610,  611,  453,  452,  611,  612,  451,  450,  612,

      613,  449,  448,  613,  614,  447,  446,  614,  615,  615,
      615,  615,  615,  615,  615,  615,  615,  615,  616,  445,
      444,  616,  617,  442,  441,  617,  618,  440,  438,  618,
      619,  437,  435,  619,  620,  620,  620,  620,  620,  620,
      620,  620,  620,  620,  621,  621,  621,  621,  621,  621,
      621,  621,  621,  621,  622,  434,  622,  622,  622,  622,
      622,  622,  622,  622,  433,  432,  431,  430,  429,  428,
      427,  426,  425,  424,  423,  422,  421,  420,  419,  418,
      417,  416,  415,  414,  413,  412,  399,  398,  397,  396,
      395,  394,  393,  392,  390,  389,  387,  386,  385,  384,

      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  368,  367,  366,  365,  364,  353,  349,
      347,  346,  345,  344,  343,  342,  341,  339,  337,  336,
      335,  334,  333,  332,  331,  330,  328,  327,  326,  325,
      324,  323,  321,  320,  319,  316,  315,  314,  310,  302,
      301,  299,  297,  296,  295,  294,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  282,  281,  280,  278,
      277,  276,  274,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  262,  261,  256,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  236,  233,

      232,  228,  227,  226,  225,  224,  223,  222,  221,  220,
      219,  218,  216,  215,  214,  212,  211,  193,  180,  179,
      178,  177,  176,  175,  174,  173,  172,  171,  170,  169,
      167,  166,  165,  163,  162,  161,  159,  157,  155,  154,
      153,  151,  146,  143,  121,  108,  107,  102,   97,   96,
       95,   90,   88,   86,   85,   84,   81,   59,   45,   35,
       33,   25,    2,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,

      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591,  591,  591,
      591,  591,  591,  591,  591,  591,  591,  591
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int gram__flex_debug;
int gram__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
static int yy_more_flag = 0;
static int yy_more_len = 0;
#define yymore() ((yy_more_flag) = 1)
#define YY_MORE_ADJ (yy_more_len)
#define YY_RESTORE_YY_MORE_OFFSET
char *gram_text;
#line 1 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
/* -*- c-file-style: "stroustrup"; -*- */
/* Bison Grammar Scanner                             -*- C -*-

   Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010
   Free Software Foundation, Inc.

   This file is part of Bison, the GNU Compiler Compiler.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
/* Copyright (C) 2010 by the Regents of the University of California. */
#define YY_NO_INPUT 1
#line 29 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"

#include <climits>
#include "horn.h"
#include "parse-horn.h"

using namespace std;

#define FLEX_PREFIX(Id) gram_ ## Id

static size_t no_cr_read (FILE *, char *, size_t);

static void handle_syncline (char *, location);
static void unexpected_eof (const char *, char const *);
static void unexpected_newline (const char *, char const *);

static int percent_percent_count;


/* Strings and characters in directives/rules. */

/* A complex tag, with nested angles brackets. */

/* Four types of user code:
- prologue (code between `%{' `%}' in the first section, before %%);
- actions, printers, union, etc, (between braced in the middle section);
- epilogue (everything after the second %%). 
- predicate (code between `%?{' and `{' in middle section); */

/* C and C++ comments in code. */

/* Strings and characters in code. */

/* POSIX says that a tag must be both an id and a C union member, but
   historically almost any character is allowed in a tag.  We disallow
   NUL, as this simplifies our implementation.  We disallow angle
   bracket to match them in nested pairs: several languages use them
   for generics/template types.  */
/* Zero or more instances of backslash-newline.  Following GCC, allow
   white space between the backslash and the newline.  */
#line 1012 "scan-horn.cc"

#define INITIAL 0
#define SC_ESCAPED_STRING 1
#define SC_ESCAPED_CHARACTER 2
#define SC_TAG 3
#define SC_PROLOGUE 4
#define SC_BRACED_CODE 5
#define SC_EPILOGUE 6
#define SC_PREDICATE 7
#define SC_COMMENT 8
#define SC_LINE_COMMENT 9
#define SC_STRING 10
#define SC_CHARACTER 11

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gram_lex_destroy (void );

int gram_get_debug (void );

void gram_set_debug (int debug_flag  );

YY_EXTRA_TYPE gram_get_extra (void );

void gram_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *gram_get_in (void );

void gram_set_in  (FILE * in_str  );

FILE *gram_get_out (void );

void gram_set_out  (FILE * out_str  );

int gram_get_leng (void );

char *gram_get_text (void );

int gram_get_lineno (void );

void gram_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gram_wrap (void );
#else
extern int gram_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( gram_text, gram_leng, 1, gram_out )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gram_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gram_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, gram_in))==0 && ferror(gram_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(gram_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gram_lex (void);

#define YY_DECL int gram_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after gram_text and gram_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( gram_leng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(gram_text[gram_leng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 90 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"


  /* Nesting level.  Either for nested braces, or nested angle brackets
     (but not mixed).  */
  int nesting;

  /* Parent context state, when applicable.  */
  int context_state;




  /*-----------------------.
  | Scanning white space.  |
  `-----------------------*/

#line 1223 "scan-horn.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! gram_in )
			gram_in = stdin;

		if ( ! gram_out )
			gram_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gram_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				gram__create_buffer(gram_in,YY_BUF_SIZE );
		}

		gram__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		(yy_more_len) = 0;
		if ( (yy_more_flag) )
			{
			(yy_more_len) = (yy_c_buf_p) - (yytext_ptr);
			(yy_more_flag) = 0;
			}
		yy_cp = (yy_c_buf_p);

		/* Support of gram_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 592 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 591 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

/* Comments and white space.  */
case 1:
YY_RULE_SETUP
#line 109 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
warn_at (gram_text, _("stray `,' treated as white space"));
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 110 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ }
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 112 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    handle_syncline (gram_text + sizeof "#line " - 1, gram_text);
  }
	YY_BREAK

/*----------------------------.
  | Scanning Bison directives.  |
  `----------------------------*/
/* For directives that are also command line options, the regex must be
	"%..."
     after "[-_]"s are removed, and the directive must match the --long
     option name, with a single string argument.  Otherwise, add exceptions
     to ../build-aux/cross-options.pl.  */


case 4:
YY_RULE_SETUP
#line 130 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_CODE;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 131 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_FLAG;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 132 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_DEFAULT_PREC;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 133 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_DEFINE;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 134 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_DEFINES;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 135 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_DESTRUCTOR;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 136 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_DPREC;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 137 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_ERROR_VERBOSE;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 138 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_EXPECT;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 139 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_EXPECT_RR;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 140 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_FILE_PREFIX;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 141 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_YACC;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 142 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_INITIAL_ACTION;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 143 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_GLR_PARSER;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 144 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_INTERACTIVE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 145 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_LANGUAGE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 146 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_LEFT;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 147 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PARAM;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 148 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_FLAG;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 149 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_MERGE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 150 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_NAME_PREFIX;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 151 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_NO_DEFAULT_PREC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 152 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_NO_LINES;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 153 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_NONASSOC;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 154 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_NONDETERMINISTIC_PARSER;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 155 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_NTERM;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 156 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_OUTPUT;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 157 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PARAM;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 158 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PARAM;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 159 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PREC;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 160 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PRECEDENCE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 161 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PRINTER;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 162 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_FLAG;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 163 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_REQUIRE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 164 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_RIGHT;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 165 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_SKELETON;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 166 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_START;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 167 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_TOKEN;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 168 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_TOKEN;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 169 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_TOKEN_TABLE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 170 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_TYPE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 171 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_UNION;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 172 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_VERBOSE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 173 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_YACC;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 175 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_EXPAND;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 176 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PERCENT_PREFER;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 178 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return ANY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 179 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return BOL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 180 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return EOL;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 181 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return ENDFILE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 183 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    complain_at (gram_text, _("invalid directive: '%s'"), gram_text);
  }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 187 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return gram_text[0];
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 188 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return PLUS_EQ;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 190 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return DOTDOT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 192 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return UNDERSCORE_ID;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 193 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return UPPER_ID;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 194 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return LOWER_ID;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 195 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return OTHER_ID;
	YY_BREAK
case 62:
#line 198 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
case 63:
YY_RULE_SETUP
#line 198 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return INT;
	YY_BREAK
/* Identifiers may not start with a digit.  Yet, don't silently
     accept "1FOO" as "1 FOO".  */
case 64:
YY_RULE_SETUP
#line 202 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    complain_at (gram_text, _("invalid identifier: '%s'"), gram_text);
  }
	YY_BREAK
/* Characters.  */
case 65:
YY_RULE_SETUP
#line 207 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ BEGIN SC_ESCAPED_CHARACTER; yymore (); }
	YY_BREAK
/* Strings. */
case 66:
YY_RULE_SETUP
#line 210 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ BEGIN SC_ESCAPED_STRING; yymore (); }
	YY_BREAK
/* Prologue. */
case 67:
YY_RULE_SETUP
#line 213 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ BEGIN SC_PROLOGUE; yymore (); }
	YY_BREAK
/* Code in between braces.  */
case 68:
YY_RULE_SETUP
#line 216 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    nesting = 0;
    BEGIN SC_BRACED_CODE;
    yymore ();
  }
	YY_BREAK
/* Semantic predicate. */
case 69:
/* rule 69 can match eol */
YY_RULE_SETUP
#line 223 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    nesting = 0;
    BEGIN SC_PREDICATE;
    yymore ();
  }
	YY_BREAK
/* A type. */
case 70:
YY_RULE_SETUP
#line 230 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return TAG_ANY;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 231 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return TAG_NONE;
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 232 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
return TAG;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 233 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    nesting = 0;
    BEGIN SC_TAG;
    yymore ();
  }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 239 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    if ((percent_percent_count += 1) == 2)
      BEGIN SC_EPILOGUE;
    return PERCENT_PERCENT;
  }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 245 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    complain_at (gram_text, _("invalid character: '%s'"), gram_text);
  }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 249 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    while (gram_leng > 0 && gram_text[gram_leng-1] == '\0')
        gram_leng -= 1;
    yyterminate ();
  }
	YY_BREAK

/*--------------------------------------------------------------.
  | Supporting \0 complexifies our implementation for no expected |
  | added value.                                                  |
  `--------------------------------------------------------------*/


case 76:
YY_RULE_SETUP
#line 264 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
complain_at (gram_text, _("invalid null character"));
	YY_BREAK

/*------------------------------------------------------------.
  | Scanning a C comment.  The initial `/ *' is already eaten.  |
  `------------------------------------------------------------*/


case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 274 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); BEGIN context_state; }
	YY_BREAK
case YY_STATE_EOF(SC_COMMENT):
#line 275 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
unexpected_eof (gram_text, "*/"); BEGIN context_state;
	YY_BREAK

/*--------------------------------------------------------------.
  | Scanning a line comment.  The initial `//' is already eaten.  |
  `--------------------------------------------------------------*/


case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 285 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); BEGIN context_state; }
	YY_BREAK
case 79:
/* rule 79 can match eol */
YY_RULE_SETUP
#line 286 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
yymore ();
	YY_BREAK
case YY_STATE_EOF(SC_LINE_COMMENT):
#line 287 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); BEGIN context_state; }
	YY_BREAK

/*------------------------------------------------.
  | Scanning a Bison string, including its escapes. |
  | The initial quote is already eaten.             |
  `------------------------------------------------*/


case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 298 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    if (gram_text[0] == '\n')
      unexpected_newline (gram_text, "\"");
    BEGIN INITIAL;
    return STRING;
  }
	YY_BREAK
case YY_STATE_EOF(SC_ESCAPED_STRING):
#line 304 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    unexpected_eof (gram_text, "\"");
    BEGIN INITIAL;
    return STRING;
  }
	YY_BREAK

/*------------------------------------.
  | Scanning a Bison character literal. |
  `------------------------------------*/


case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 317 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    if (gram_text[0] == '\n')
      unexpected_newline (gram_text, "'");
    BEGIN INITIAL;
    if (real_length (string (gram_text+1, gram_leng-2)) != 1)
        complain_at (gram_text, 
                     "single-quoted literals must contain one character");
    return CHAR;
  }
	YY_BREAK
case YY_STATE_EOF(SC_ESCAPED_CHARACTER):
#line 326 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    unexpected_eof (gram_text, "'");
    BEGIN INITIAL;
    return CHAR;
  }
	YY_BREAK

/*-----------------------------------------------------------.
  | Scanning a Bison nested tag.  The initial angle bracket is |
  | already eaten.                                             |
  `-----------------------------------------------------------*/


case 82:
YY_RULE_SETUP
#line 340 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    --nesting;
    if (nesting < 0)
      {
        BEGIN INITIAL;
        return TAG;
      }
    yymore ();
  }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 350 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 351 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ nesting += 1; yymore (); }
	YY_BREAK
case YY_STATE_EOF(SC_TAG):
#line 353 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    unexpected_eof (gram_text, ">");
    BEGIN INITIAL;
    return TAG;
  }
	YY_BREAK

/*----------------------------.
  | Decode escaped characters.  |
  `----------------------------*/


case 85:
YY_RULE_SETUP
#line 366 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ complain_at (gram_text, "invalid escape: \\X"); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 367 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ complain_at (gram_text, "invalid \\x escape"); }
	YY_BREAK
case 87:
#line 369 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
case 88:
#line 370 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
case 89:
#line 371 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
case 90:
#line 372 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 372 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 374 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
                          complain_at (gram_text, "Unicode escapes not currently supported."); }
	YY_BREAK

/*--------------------------------------------.
  | Scanning user-code characters and strings.  |
  `--------------------------------------------*/


case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 385 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); }
	YY_BREAK



case 94:
YY_RULE_SETUP
#line 390 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ BEGIN context_state; yymore (); }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 391 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ unexpected_newline (gram_text, "'"); BEGIN context_state; }
	YY_BREAK
case YY_STATE_EOF(SC_CHARACTER):
#line 392 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ unexpected_eof (gram_text, "'"); BEGIN context_state; }
	YY_BREAK



case 96:
YY_RULE_SETUP
#line 397 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ BEGIN context_state; yymore (); }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 398 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ unexpected_newline (gram_text, "\""); BEGIN context_state; }
	YY_BREAK
case YY_STATE_EOF(SC_STRING):
#line 399 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ unexpected_eof (gram_text, "\""); BEGIN context_state; }
	YY_BREAK

/*---------------------------------------------------.
  | Strings, comments etc. can be found in user code.  |
  `---------------------------------------------------*/


case 98:
YY_RULE_SETUP
#line 409 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_CHARACTER;
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 414 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_STRING;
  }
	YY_BREAK
case 100:
/* rule 100 can match eol */
YY_RULE_SETUP
#line 419 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_COMMENT;
  }
	YY_BREAK
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 424 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    context_state = YY_START;
    yymore ();
    BEGIN SC_LINE_COMMENT;
  }
	YY_BREAK

/*----------------------------------------------------.
  | Scanning some code in braces (actions, predicates). |
  `----------------------------------------------------*/


case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 439 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ nesting++; yymore (); }
	YY_BREAK
case 103:
/* rule 103 can match eol */
YY_RULE_SETUP
#line 440 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ nesting--; yymore (); }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 442 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{ yymore (); }
	YY_BREAK
case YY_STATE_EOF(SC_BRACED_CODE):
case YY_STATE_EOF(SC_PREDICATE):
#line 444 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    int token = (YY_START == SC_BRACED_CODE) ? BRACED_CODE : BRACED_PREDICATE;
    unexpected_eof (gram_text, "}");
    BEGIN INITIAL;
    return token;
  }
	YY_BREAK



case 105:
YY_RULE_SETUP
#line 454 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    --nesting;
    if (nesting < 0)
      {
	BEGIN INITIAL;
	return BRACED_CODE;
      }
    else
      yymore ();
  }
	YY_BREAK



case 106:
YY_RULE_SETUP
#line 468 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    --nesting;
    if (nesting < 0)
      {
	BEGIN INITIAL;
	return BRACED_PREDICATE;
      }
    else
      yymore ();
  }
	YY_BREAK

/*--------------------------------------------------------------.
  | Scanning some prologue: from "%{" (already scanned) to "%}".  |
  `--------------------------------------------------------------*/


case 107:
YY_RULE_SETUP
#line 486 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    BEGIN INITIAL;
    return PROLOGUE;
  }
	YY_BREAK
case YY_STATE_EOF(SC_PROLOGUE):
#line 491 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    unexpected_eof (gram_text, "%}");
    BEGIN INITIAL;
    return PROLOGUE;
  }
	YY_BREAK

/*---------------------------------------------------------------.
  | Scanning the epilogue (everything after the second "%%", which |
  | has already been eaten).                                       |
  `---------------------------------------------------------------*/


case YY_STATE_EOF(SC_EPILOGUE):
#line 506 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
{
    BEGIN INITIAL;
    while (gram_leng > 0 && gram_text[gram_leng-1] == '\0')
        gram_leng -= 1;
    return EPILOGUE;
  }
	YY_BREAK

case 108:
#line 516 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 516 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
yymore ();
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 518 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2128 "scan-horn.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gram_in at a new source and called
			 * gram_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = gram_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( gram_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * gram_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of gram_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gram_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gram_restart(gram_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gram_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 64);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 592 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 64;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 592 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 591);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gram_restart(gram_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gram_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve gram_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void gram_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        gram_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            gram__create_buffer(gram_in,YY_BUF_SIZE );
	}

	gram__init_buffer(YY_CURRENT_BUFFER,input_file );
	gram__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void gram__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gram_pop_buffer_state();
	 *		gram_push_buffer_state(new_buffer);
     */
	gram_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gram__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (gram_wrap()) processing, but the only time this flag
	 * is looked at is after gram_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void gram__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	gram_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE gram__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gram_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gram__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gram_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gram__create_buffer()" );

	b->yy_is_our_buffer = 1;

	gram__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with gram__create_buffer()
 * 
 */
    void gram__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gram_free((void *) b->yy_ch_buf  );

	gram_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gram_restart() or at EOF.
 */
    static void gram__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	gram__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gram__init_buffer was _probably_
     * called from gram_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void gram__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gram__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void gram_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	gram_ensure_buffer_stack();

	/* This block is copied from gram__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gram__switch_to_buffer. */
	gram__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void gram_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	gram__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		gram__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gram_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gram_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gram_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gram_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gram_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gram__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gram_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gram__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gram__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gram_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       gram__scan_bytes() instead.
 */
YY_BUFFER_STATE gram__scan_string (yyconst char * yystr )
{
    
	return gram__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to gram_lex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gram__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gram_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gram__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gram__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gram__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gram_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		gram_text[gram_leng] = (yy_hold_char); \
		(yy_c_buf_p) = gram_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		gram_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int gram_get_lineno  (void)
{
        
    return gram_lineno;
}

/** Get the input stream.
 * 
 */
FILE *gram_get_in  (void)
{
        return gram_in;
}

/** Get the output stream.
 * 
 */
FILE *gram_get_out  (void)
{
        return gram_out;
}

/** Get the length of the current token.
 * 
 */
int gram_get_leng  (void)
{
        return gram_leng;
}

/** Get the current token.
 * 
 */

char *gram_get_text  (void)
{
        return gram_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void gram_set_lineno (int  line_number )
{
    
    gram_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see gram__switch_to_buffer
 */
void gram_set_in (FILE *  in_str )
{
        gram_in = in_str ;
}

void gram_set_out (FILE *  out_str )
{
        gram_out = out_str ;
}

int gram_get_debug  (void)
{
        return gram__flex_debug;
}

void gram_set_debug (int  bdebug )
{
        gram__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gram_lex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    gram_in = stdin;
    gram_out = stdout;
#else
    gram_in = (FILE *) 0;
    gram_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gram_lex_init()
     */
    return 0;
}

/* gram_lex_destroy is for both reentrant and non-reentrant scanners. */
int gram_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gram__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gram_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	gram_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gram_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gram_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gram_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gram_free (void * ptr )
{
	free( (char *) ptr );	/* see gram_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 518 "/home/cs/hilfingr/work/grammars/horn/scan-horn.l"



string current_file;
string program_name;

text_buffer input_buffer;
static const char *last_token_end;

lstring last_skipped_text;


/* Read bytes from FP into buffer BUF of size SIZE.  Return the
   number of bytes read.  Remove '\r' from input, treating \r\n
   and isolated \r as \n.  */

static size_t
no_cr_read (FILE *fp, char *buf, size_t size)
{
  size_t bytes_read = fread (buf, 1, size, fp);
  if (bytes_read)
    {
      char *w = (char*) memchr (buf, '\r', bytes_read);
      if (w)
	{
	  char const *r = ++w;
	  char const *lim = buf + bytes_read;

	  for (;;)
	    {
	      /* Found an '\r'.  Treat it like '\n', but ignore any
		 '\n' that immediately follows.  */
	      w[-1] = '\n';
	      if (r == lim)
		{
		  int ch = getc (fp);
		  if (ch != '\n' && ungetc (ch, fp) != ch)
		    break;
		}
	      else if (*r == '\n')
		r++;

	      /* Copy until the next '\r'.  */
	      do
		{
		  if (r == lim)
		    return w - buf;
		}
	      while ((*w++ = *r++) != '\r');
	    }

	  return w - buf;
	}
    }

  return bytes_read;
}

/*----------------------------------------------------------------.
| Handle `#line INT "FILE"'.  ARGS has already skipped `#line '.  |
`----------------------------------------------------------------*/

static void
handle_syncline (char *args, location loc)
{
  warn_at (gram_text, _("#line directives are not supported"));
  return;
}


/*----------------------------------------------------------------.
| For a token or comment starting at START, report message MSGID, |
| which should say that an end marker was found before		  |
| the expected TOKEN_END.					  |
`----------------------------------------------------------------*/

static void
unexpected_end (const char* start, char const *msgid, char const *token_end)
{
  complain_at (start, _(msgid), token_end);
}


/*------------------------------------------------------------------------.
| Report an unexpected EOF in a token or comment starting at START.       |
| An end of file was encountered and the expected TOKEN_END was missing.  |
`------------------------------------------------------------------------*/

static void
unexpected_eof (const char* start, char const *token_end)
{
  unexpected_end (start, _("missing `%s' at end of file"), token_end);
}


/*----------------------------------------.
| Likewise, but for unexpected newlines.  |
`----------------------------------------*/

static void
unexpected_newline (const char* start, char const *token_end)
{
  unexpected_end (start, _("missing `%s' at end of line"), token_end);
}


/*---------------------------------------------------------------------------.
| Initialize the scanner to scan the contents of FILE, denoting it as NAME.  |
`---------------------------------------------------------------------------*/

void
gram_scanner_initialize (FILE *input, const string& name)
{
  char chunk[YY_BUF_SIZE];
  yy_size_t chunk_size;

  input_buffer.clear ();

  while ((chunk_size = no_cr_read (input, chunk, YY_BUF_SIZE)) > 0)
    input_buffer.append (chunk, chunk_size);

  input_buffer.append ("\000\000", 2);

  last_token_end = input_buffer.data ();
  gram__switch_to_buffer (gram__scan_buffer (input_buffer.data (), 
				       input_buffer.data_size ()));

  yylloc = input_buffer.data ();
  set_err_loc (yylloc);
  current_file = name;
  percent_percent_count = 0;
}


/*----------------------------------------.
 * The line number on which *TEXT occurs. |
 `---------------------------------------*/

int
location_line_number (location loc)
{
  /* NOTE: must compensate for case where the static initialization
   * of TOKEN_LIST_OBJ precedes that of std::string. */
  int line;
  if (!init_phase_done 
      || loc == NULL
      || input_buffer.data () > loc
      || loc > input_buffer.data () + input_buffer.size () - 2)
      return 0;
  line = 1;
  for (location p = strchr (input_buffer.data (), '\n'); 
       p < loc;
       p = strchr (p+1, '\n')) {
      if (p == NULL)
          break;
      line += 1;
  }
  return line;
}

/*------------------------------------------------------------------.
 * Print LOCATION (relative to input file) on FILE in Unix format.  |
`------------------------------------------------------------------*/

int
location_print (FILE* file, location loc)
{
  return fprintf (file, "%s:%d", current_file.c_str (),
                  location_line_number (loc));
}

/*---------------------------------------------------.
| Output final buffer contents, as modified, to OUT. |
`---------------------------------------------------*/

void
gram_scanner_write_file (FILE* out)
{
  input_buffer.erase (input_buffer.data () + input_buffer.data_size () - 2,
		      2);
  input_buffer.fwrite (out);
}

/*-----------------------------------------------.
| Free all the memory allocated to the scanner.  |
`-----------------------------------------------*/

void
gram_scanner_free ()
{
  gram_lex_destroy ();
}

/*------------------.
| Main entry point. |
`------------------*/

int
gram_scan ()
{
    yylval = NULL;
    int c = gram_lex ();
    if (yylval == NULL)
      yylval = new Token (lstring (gram_text, gram_leng),
			  lstring (last_token_end, gram_text - last_token_end), 
			  c);
    last_token_end = gram_text + gram_leng;
    yylloc = gram_text;
    set_err_loc (yylloc);
    return c;
}

